package main;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Iterator;

public class BibFile {

	private ArrayList<BibRecord> records = new ArrayList<BibRecord>();
		
	/*private ArrayList<BibRecord> getRecords() {
		return records;
	}
	 */
	public void URL4BibTeX(String fileName){
		
		this.loadFromFile(fileName);
		this.addURLHowtopublished();
		this.writeToFile(fileName);
	}
	
	public BibFile() {
		records.clear();
	}
	
	private void addURLHowtopublished(){
		
		for (Iterator <BibRecord> iterator = records.iterator(); iterator.hasNext();){
			
			iterator.next().addURLHowtopublished();
						
		}
	}
	
	public void print(){
		System.out.println("..........Begin of file.................."); //$NON-NLS-1$
		
		for (Iterator <BibRecord> iterator = records.iterator(); iterator.hasNext();){
			BibRecord rec = iterator.next();
			rec.print();
			System.out.println(""); //$NON-NLS-1$
		}
		
		System.out.println("..........Begin of file.................."); //$NON-NLS-1$
		
	}
	
	private void addRecord(BibRecord record){
				this.records.add(record);
	}
	
		
	private BibRecord processFileRecord(ArrayList<String> fileRecord) {
		
		BibRecord bibRecord = new BibRecord();
		Boolean first = true;
		
		//printArrayList(fileRecord,"fileRecord");
						
		
		for (Iterator <String> iterator = fileRecord.iterator(); iterator.hasNext();){
			if (first) {
				
				String firstLine = iterator.next();
				bibRecord.setRecordType(getTypeRecord(firstLine));
				bibRecord.setField("key", getKeyValue(firstLine)); //$NON-NLS-1$
				first=false;
				
			}else{
				
				String noFirstLine = iterator.next();
				
				bibRecord.setField(cleanValue(noFirstLine.split("=")[0]),  //$NON-NLS-1$
						cleanValue(noFirstLine.split("=")[1])); //$NON-NLS-1$
				
			}
		}
		return bibRecord;
		
		}
	

private String getKeyValue(String firstLine) {
	return firstLine.substring(firstLine.indexOf("{")+1,firstLine.length()-1); //$NON-NLS-1$
}

private String getTypeRecord(String firstLine) {
	
	return firstLine.substring(1,firstLine.indexOf("{")); //$NON-NLS-1$
}

private String cleanValue(String string) {
	
	while (string.startsWith(Messages.getString("BibFile.8"))){ //$NON-NLS-1$
		string=string.substring(1);
	}
	
	if (string.startsWith("{")){ //$NON-NLS-1$
		string=string.substring(1);
	}
	if (string.endsWith(",")){ //$NON-NLS-1$
		string=string.substring(0, string.length()-1);
	}
	if (string.endsWith("}")){ //$NON-NLS-1$
		string=string.substring(0, string.length()-1);
	}
	
	return string.trim();
}

	private void writeToFile(String fileName) {
	FileWriter fw = null;
	try {
		fw = new FileWriter(fileName.substring
				(0, fileName.length()-4) + Messages.getString("URL4BibTeX.Constans.fileSuffix")); //$NON-NLS-1$
	} catch (IOException e) {
		System.out.println(Messages.getString("URL4BibTeX.Errors.fileNotCreated")); //$NON-NLS-1$
	}
	
	BufferedWriter bw = new BufferedWriter(fw);
	PrintWriter targetFile = new PrintWriter(bw);
	
	targetFile.println("File generated by " + Messages.getString("URL4BibTeX.Constants.appName")); //$NON-NLS-1$ //$NON-NLS-2$
	targetFile.println(""); //$NON-NLS-1$
	
	for (Iterator<BibRecord> iterator = records.iterator(); iterator.hasNext();){
				
		targetFile.print(iterator.next().writeRecord());
		targetFile.println("}"); //$NON-NLS-1$
		targetFile.println(""); //$NON-NLS-1$
	}
	
	targetFile.close();
}

	private void loadFromFile(String fileName){
		// Preparamos el buffer reader
			FileReader fr = null;
			try {
				fr = new FileReader(fileName);
			} catch (FileNotFoundException e) {
				System.out.println(Messages.getString("URL4BibTeX.Errors.fileNotFound")); //$NON-NLS-1$
			}
			BufferedReader bf = new BufferedReader(fr);
			
			String fila;
			
			ArrayList<String> arrayListFileRecord = new ArrayList<String>();
			Boolean addToArrayListFileRecord = false;
			Boolean storeIntoBibFile = false;
				
			try {
				while ((fila = bf.readLine())!=null) {
				   //Inicio de un registro
					if (fila.contains("@") && fila.contains("{")){ //$NON-NLS-1$ //$NON-NLS-2$
						addToArrayListFileRecord = true;
					}else if (fila.contains("}") && ! fila.contains("{")){ //$NON-NLS-1$ //$NON-NLS-2$
						addToArrayListFileRecord = false;
						storeIntoBibFile = true;
					}
					
					if (addToArrayListFileRecord){
						arrayListFileRecord.add(fila);
					}else {
						if (storeIntoBibFile){
							
							this.addRecord(processFileRecord(arrayListFileRecord));
							
							arrayListFileRecord.clear();
							storeIntoBibFile=false;
						}
					}
					
								
				}
			} catch (IOException e) {
				System.out.println(Messages.getString("URL4BibTeX.Errors.fileNotRead")); //$NON-NLS-1$
			}
			try {
				bf.close();
			} catch (IOException e) {
				System.out.println(Messages.getString("URL4BibTeX.Errors.fileNotClose")); //$NON-NLS-1$
			}
			
			
			
			
			
		}
	
	public int countRecords(){
		return this.records.size();
	}
}
