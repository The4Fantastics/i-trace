-- @nsURI WSDL=http://WSDLv1
-- @nsURI iTrace=http://www.kybele.es/iTrace
-- @nsURI ASD=http://ASD

-- @path OUT=/ASD2WSDL/Models/WSDL.xmi
-- @path TRACE=/ASD2WSDL/Models/ASD2WSDL.iTrace
-- @path IN=/ASD2WSDL/Models/ASD.xmi


module ASD2WSDL_iTrace;
create OUT : WSDL, TRACE : iTrace from IN : ASD;

uses WSDLHelpersv1;


-- ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬
--	Incio:	iTrace: Uso de la biblioteca iTrace_parameters para ASD2WSDL
-- ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬
uses iTrace_parameters;
-- ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬
--	Fin:	iTrace: Uso de la biblioteca iTrace_parameters para ASD2WSDL
-- ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬


-- ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬
--	Incio:	iTrace: creación de la Raiz y Modelos con helper auxiliares
-- ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬

entrypoint rule CreateTraceModelRoot (){
	to
		root : iTrace!iTraceModel
	do {
		root.projectName <- 'ASD2WSDL';
		root.version <- thisModule.get_Version();
		thisModule.getTraceModelRoot <- root;
		thisModule.createSourceModel();
		thisModule.createTargetModel();
	}
}

helper def: getTraceModelRoot : iTrace!iTraceModel = OclUndefined;

helper def: getSourceModel : iTrace!Model = OclUndefined;

helper def: getTargetModel : iTrace!Model = OclUndefined;

rule createSourceModel(){
  	to
		sourceModel : iTrace!Model (
  			aspect <- 'Content',
  			name <- 'ASD',
			path <- thisModule.get_PathModel_ASD(),
			abstractionLevel <- 'PDM',
			metamodel <- thisModule.get_Metamodel_ASD(),
			iTraceModel <- thisModule.getTraceModelRoot
		)
  		do {
     	
     	thisModule.getSourceModel <- sourceModel;
     }
  }
	
rule createTargetModel(){
  to
		targetModel : iTrace!Model (
  			aspect <- 'Content',
  			name <- 'WSDL',
			path <- thisModule.get_PathModel_WSDL(),
			abstractionLevel <- 'PSM',
			metamodel <- thisModule.get_Metamodel_WSDL(),
			iTraceModel <- thisModule.getTraceModelRoot
			
		)
     do {
     	
     	thisModule.getTargetModel <- targetModel;
     }
  }

-- ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬
--	Fin:	iTrace: creación de la Raiz y Modelos con helper auxiliares
-- ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬

rule ServiceDescription2Definitions {
	from
		i : ASD!ServiceDescription
	to
		o : WSDL!Definitions (  
			name <- i.name,
			portType <- i.operations,
			message <- i.operations->collect(e|e.contents),
			types <- s
		),
		
		s : WSDL!ElementType(
			schema <- s2
		),
		
		s2: WSDL!Schema(
			complexType <- ASD!InfoType.allInstances()-> select(e| e.infoType.size()>1 and
			e.refImmediateComposite().oclType() = ASD!ServiceDescription),
			
			simpleType <- ASD!InfoType.allInstances()-> select(e| e.valueType <> #document and 
			e.oclType()<> ASD!InfoTypeImported and
			e.refImmediateComposite().oclType() = ASD!ServiceDescription),
			
			element <- ASD!InfoType.allInstances()-> select(e| e.infoType.size()=1 and
			e.refImmediateComposite().oclType() = ASD!ServiceDescription)
		)
-- ____________________ Begin Added by iTrace _________________________ 
		 ,
		
		TraceLink : iTrace!M2MLink (
   			ruleName <- 'ServiceDescription2Definitions',
  			comment <- thisModule.get_Comment(), 
			createdOn <- thisModule.get_CreatedOn(),
   			mode <- thisModule.get_Mode(), 
   			technicalBinding <- thisModule.get_TechnicalBinding(),
			createdBy <- thisModule.get_CreatedBy(),
			type <- thisModule.get_Type(),
			fromFileName <- 'ASD2WSDL.atl',
			
			iTraceModel <- thisModule.getTraceModelRoot
  		),
  
		elementSource1 : iTrace!SourceElement (	
			type <- i.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getSourceModel
		),
			
		elementTarget1 : iTrace!TargetElement (	
			type <- o.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getTargetModel
		),
		
		elementTarget2 : iTrace!TargetElement (	
			type <- s.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getTargetModel
		),
		
		elementTarget3 : iTrace!TargetElement (	
			type <- s2.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getTargetModel
		)	
		do{
			elementSource1.refSetValue('object', i);
			elementTarget1.refSetValue('object', o);
			elementTarget2.refSetValue('object', s);
			elementTarget3.refSetValue('object', s2);
		}
-- ____________________ End Added by iTrace _________________________
}


rule Operation2PortTypeOperation {
	from
		i : ASD!Operation
	to
		o : WSDL!PortType(  
			operation <- pto
		),
		pto : WSDL!PortTypeOperation(  
			name <- i.name,
			output <- if i.contents->select(e|e.role=#output)->first()<> OclUndefined 
			 then thisModule.Message2PortTypeOutput(i.contents->select(e|e.role=#output)->first())
			 else OclUndefined endif,
			input <- if i.contents->select(e|e.role=#input)->first()<> OclUndefined 
			 then thisModule.Message2PortTypeInput(i.contents->select(e|e.role=#input)->first())
			 else OclUndefined endif,
			fault <- if i.contents->select(e|e.role=#fault)->first()<> OclUndefined 
			 then thisModule.getPortTypeFault(i.contents->select(e|e.role=#fault))
			 else Sequence{} endif
		)
-- ____________________ Begin Added by iTrace _________________________ 
		 ,
		
		TraceLink : iTrace!M2MLink (
   			ruleName <- 'Operation2PortTypeOperation',
  			comment <- thisModule.get_Comment(), 
			createdOn <- thisModule.get_CreatedOn(),
   			mode <- thisModule.get_Mode(), 
   			technicalBinding <- thisModule.get_TechnicalBinding(),
			createdBy <- thisModule.get_CreatedBy(),
			type <- thisModule.get_Type(),
			fromFileName <- 'ASD2WSDL.atl',
			
			iTraceModel <- thisModule.getTraceModelRoot
  		),
  
		elementSource1 : iTrace!SourceElement (	
			type <- i.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getSourceModel
		),
			
		elementTarget1 : iTrace!TargetElement (	
	 		type <- o.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getTargetModel
		),
		
		elementTarget2 : iTrace!TargetElement (	
	 		ref <- pto.__xmiID__,
			type <- pto.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getTargetModel
		)
		do{
			elementSource1.refSetValue('object', i);
			elementTarget1.refSetValue('object', o);
			elementTarget2.refSetValue('object', pto);
		}
-- ____________________ End Added by iTrace _________________________
}

lazy rule Message2PortTypeOutput{
	from
		i : ASD!Message
	to
		o : WSDL!PortTypeOutput(  
			message <- i
		)
-- ____________________ Begin Added by iTrace _________________________ 
		 ,
		
		TraceLink : iTrace!M2MLink (
   			ruleName <- 'Message2PortTypeOutput',
  			comment <- thisModule.get_Comment(), 
			createdOn <- thisModule.get_CreatedOn(),
   			mode <- thisModule.get_Mode(), 
   			technicalBinding <- thisModule.get_TechnicalBinding(),
			createdBy <- thisModule.get_CreatedBy(),
			type <- thisModule.get_Type(),
			fromFileName <- 'ASD2WSDL.atl',
			
			iTraceModel <- thisModule.getTraceModelRoot
  		),
  
		elementSource1 : iTrace!SourceElement (	
			type <- i.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getSourceModel
		),
			
		elementTarget1 : iTrace!TargetElement (	
	 		type <- o.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getTargetModel
		)
		do{
			elementSource1.refSetValue('object', i);
			elementTarget1.refSetValue('object', o);
		}
		
-- ____________________ End Added by iTrace _________________________
}

lazy rule Message2PortTypeInput{
	from
		i : ASD!Message
	to
		o : WSDL!PortTypeInput(  
			message <- i
		)
-- ____________________ Begin Added by iTrace _________________________ 
		 ,
		
		TraceLink : iTrace!M2MLink (
   			ruleName <- 'Message2PortTypeInput',
  			comment <- thisModule.get_Comment(), 
			createdOn <- thisModule.get_CreatedOn(),
   			mode <- thisModule.get_Mode(), 
   			technicalBinding <- thisModule.get_TechnicalBinding(),
			createdBy <- thisModule.get_CreatedBy(),
			type <- thisModule.get_Type(),
			fromFileName <- 'ASD2WSDL.atl',
			
			iTraceModel <- thisModule.getTraceModelRoot
  		),
  
		elementSource1 : iTrace!SourceElement (	
			type <- i.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getSourceModel
		),
			
		elementTarget1 : iTrace!TargetElement (	
	 		type <- o.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getTargetModel
		)
		do{
			elementSource1.refSetValue('object', i);
			elementTarget1.refSetValue('object', o);
		}
-- ____________________ End Added by iTrace _________________________
}

lazy rule Message2PortTypeFault{
	from
		i : ASD!Message
	to
		o : WSDL!PortTypeFault(  
			message <- i
		)
-- ____________________ Begin Added by iTrace _________________________ 
		 ,
		
		TraceLink : iTrace!M2MLink (
   			ruleName <- 'Message2PortTypeFault',
  			comment <- thisModule.get_Comment(), 
			createdOn <- thisModule.get_CreatedOn(),
   			mode <- thisModule.get_Mode(), 
   			technicalBinding <- thisModule.get_TechnicalBinding(),
			createdBy <- thisModule.get_CreatedBy(),
			type <- thisModule.get_Type(),
			fromFileName <- 'ASD2WSDL.atl',
			
			iTraceModel <- thisModule.getTraceModelRoot
  		),
  
		elementSource1 : iTrace!SourceElement (	
			type <- i.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getSourceModel
		),
			
		elementTarget1 : iTrace!TargetElement (	
	 		type <- o.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getTargetModel
		)
		do{
			elementSource1.refSetValue('object', i);
			elementTarget1.refSetValue('object', o);
		}
-- ____________________ End Added by iTrace _________________________
}


rule Message2Mesage{
	from
		i : ASD!Message
	to
		m : WSDL!Message(  
			name <- i.name,
			part<-thisModule.getParts(i.infoType)
		)
-- ____________________ Begin Added by iTrace _________________________ 
		 ,
		
		TraceLink : iTrace!M2MLink (
   			ruleName <- 'Message2Mesage',
  			comment <- thisModule.get_Comment(), 
			createdOn <- thisModule.get_CreatedOn(),
   			mode <- thisModule.get_Mode(), 
   			technicalBinding <- thisModule.get_TechnicalBinding(),
			createdBy <- thisModule.get_CreatedBy(),
			type <- thisModule.get_Type(),
			fromFileName <- 'ASD2WSDL.atl',
			
			iTraceModel <- thisModule.getTraceModelRoot
  		),
  
		elementSource1 : iTrace!SourceElement (	
			type <- i.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getSourceModel
		),
			
		elementTarget1 : iTrace!TargetElement (	
	 		type <- m.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getTargetModel
		)
		do{
			elementSource1.refSetValue('object', i);
			elementTarget1.refSetValue('object', m);
		}
-- ____________________ End Added by iTrace _________________________
}

lazy rule InfoType2Part{
	from
		i : ASD!InfoType
	to
		o : WSDL!Part( 
			type <- if i.oclType() <> ASD!InfoTypeImported then i->first() else OclUndefined endif,
			elementImported <- if i.oclType() = ASD!InfoTypeImported then i else OclUndefined endif
		)
-- ____________________ Begin Added by iTrace _________________________ 
		 ,
		
		TraceLink : iTrace!M2MLink (
   			ruleName <- 'InfoType2Part',
  			comment <- thisModule.get_Comment(), 
			createdOn <- thisModule.get_CreatedOn(),
   			mode <- thisModule.get_Mode(), 
   			technicalBinding <- thisModule.get_TechnicalBinding(),
			createdBy <- thisModule.get_CreatedBy(),
			type <- thisModule.get_Type(),
			fromFileName <- 'ASD2WSDL.atl',
			
			iTraceModel <- thisModule.getTraceModelRoot
  		),
  
		elementSource1 : iTrace!SourceElement (	
			traceLink <- TraceLink,
			type <- i.oclType().toString(),
			model <- thisModule.getSourceModel
		),
			
		elementTarget1 : iTrace!TargetElement (	
	 		type <- o.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getTargetModel
		)
		do{
		-- Aqui está el problema, i es una colección
			elementSource1.refSetValue('object', i);
			elementTarget1.refSetValue('object', o);
		}
-- ____________________ End Added by iTrace _________________________
}

rule InfoTypeImported2ElementImported{
	from
		i : ASD!InfoTypeImported(
			i.oclType()= ASD!InfoTypeImported
		)
	to
		o : WSDL!ElementImported(  
			name <- i.name,
			url <- i.url
		)
-- ____________________ Begin Added by iTrace _________________________ 
		 ,
		
		TraceLink : iTrace!M2MLink (
   			ruleName <- 'InfoTypeImported2ElementImported',
  			comment <- thisModule.get_Comment(), 
			createdOn <- thisModule.get_CreatedOn(),
   			mode <- thisModule.get_Mode(), 
   			technicalBinding <- thisModule.get_TechnicalBinding(),
			createdBy <- thisModule.get_CreatedBy(),
			type <- thisModule.get_Type(),
			fromFileName <- 'ASD2WSDL.atl',
			
			iTraceModel <- thisModule.getTraceModelRoot
  		),
  
		elementSource1 : iTrace!SourceElement (	
			type <- i.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getSourceModel
		),
			
		elementTarget1 : iTrace!TargetElement (	
	 		type <- o.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getTargetModel
		)
		do{
			elementSource1.refSetValue('object', i);
			elementTarget1.refSetValue('object', o);
		}
-- ____________________ End Added by iTrace _________________________
}

rule InfoType2ComplexType{
	from
		i : ASD!InfoType(
			i.valueType = #document and i.oclType()<> ASD!InfoTypeImported and
			i.infoType.size()> 1 
		)
	to
		o : WSDL!ComplexType(  
			name <- i.name,
			sequenceDef <- s
		),
		
		s: WSDL!SequenceType(  
			element <- ASD!InfoType.allInstances()-> select(e| e.valueType <> #document and 
			e.oclType()<> ASD!InfoTypeImported and
			e.refImmediateComposite().oclType() <> ASD!ServiceDescription)
		)
-- ____________________ Begin Added by iTrace _________________________ 
		 ,

		 TraceLink : iTrace!M2MLink (
   			ruleName <- 'InfoType2ComplexType',
  			comment <- thisModule.get_Comment(), 
			createdOn <- thisModule.get_CreatedOn(),
   			mode <- thisModule.get_Mode(), 
   			technicalBinding <- thisModule.get_TechnicalBinding(),
			createdBy <- thisModule.get_CreatedBy(),
			type <- thisModule.get_Type(),
			fromFileName <- 'ASD2WSDL.atl',
			
			iTraceModel <- thisModule.getTraceModelRoot
  		),
  
		elementSource1 : iTrace!SourceElement (	
			type <- i.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getSourceModel
		),
			
		elementTarget1 : iTrace!TargetElement (	
			type <- o.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getTargetModel
		),
		
		elementTarget2 : iTrace!TargetElement (	
			type <- s.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getTargetModel
		)
		do{
			elementSource1.refSetValue('object', i);
			elementTarget1.refSetValue('object', o);
			elementTarget2.refSetValue('object', s);
		}
-- ____________________ End Added by iTrace _________________________
}

rule InfoType2SimpleType{
	from
		i : ASD!InfoType(
			i.valueType <> #document and 
			i.oclType()<> ASD!InfoTypeImported and 
			if i.refImmediateComposite().oclType() = ASD!ServiceDescription then
				if i.eContents()= Sequence{} then
					true
				else
					false
				endif
			else 
				if i.refImmediateComposite().infoType.size()=1 then
					true
				else
					false
				endif
			endif
		)
	to
		o : WSDL!SimpleType(  
			name <- i.name,
			restriction <- o1
		),
		o1: WSDL!Restriction(
			primitiveType <- i.valueType.toString(),
			minInclusive <- if i.valueRange = '' then OclUndefined else thisModule.InfoType2MinInclusive(i) endif,
			maxInclusive <- if i.valueRange = '' then OclUndefined else thisModule.InfoType2axInclusive(i) endif
		)
-- ____________________ Begin Added by iTrace _________________________ 
		 ,
		
		TraceLink : iTrace!M2MLink (
   			ruleName <- 'InfoType2SimpleType',
  			comment <- thisModule.get_Comment(), 
			createdOn <- thisModule.get_CreatedOn(),
   			mode <- thisModule.get_Mode(), 
   			technicalBinding <- thisModule.get_TechnicalBinding(),
			createdBy <- thisModule.get_CreatedBy(),
			type <- thisModule.get_Type(),
			fromFileName <- 'ASD2WSDL.atl',
			
			iTraceModel <- thisModule.getTraceModelRoot
  		),
  
		elementSource1 : iTrace!SourceElement (	
			type <- i.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getSourceModel
		),
			
		elementTarget1 : iTrace!TargetElement (	
	 		type <- o.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getTargetModel
		),
		
		elementTarget2 : iTrace!TargetElement (	
	 		type <- o1.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getTargetModel
		)
		do{
			elementSource1.refSetValue('object', i);
			elementTarget1.refSetValue('object', o);
			elementTarget2.refSetValue('object', o1);
		}
-- ____________________ End Added by iTrace _________________________
}

rule InfoType2Element{
	from
		i : ASD!InfoType(
			i.oclType()<> ASD!InfoTypeImported and 
			if i.refImmediateComposite().oclType() = ASD!ServiceDescription then
				if i.eContents().size() =1  then
					true
				else
					false
				endif
			else 
				if i.refImmediateComposite().infoType.size()>1 then
					true
				else
					false
				endif
			endif 
		)
	to
		o : WSDL!Element(  
			name <- i.name,
			primitiveType <- if thisModule.getNameTypeOfElement(ASD!InfoType.allInstances(), i.name)= OclUndefined then
							    i.valueType.toString()
							 else
							 	OclUndefined
							 endif,
							
			type <- if thisModule.getNameTypeOfElement(ASD!InfoType.allInstances(), i.name)<> OclUndefined then 
						if i.ref <> OclUndefined then
							if i.ref->collect(e2|e2.name)->excludes(i.name) then
								thisModule.getNameTypeOfElement(ASD!InfoType.allInstances(), i.name)->first()
							else
								OclUndefined
							endif
						else
							thisModule.getNameTypeOfElement(ASD!InfoType.allInstances(), i.name)->first()
						endif
					else
						OclUndefined
					endif,
					
			simpleType <- i.infoType->select(e|e.valueType <> #document)->first(),
			
			complexType <- i.infoType->select(e|e.valueType = #document)->first(), 
			
			ref <- i.ref,
					
			minOccurs <- if i.valueRange = '' then OclUndefined
			 			 else thisModule.getMinOccurs(i.valueRange).toInteger()endif,
			maxOccurs <- if i.valueRange = '' then OclUndefined
			 			 else thisModule.getMaxOccurs(i.valueRange) endif
		)
-- ____________________ Begin Added by iTrace _________________________ 
		 ,
		TraceLink : iTrace!M2MLink (
   			ruleName <- 'InfoType2Element',
  			comment <- thisModule.get_Comment(), 
			createdOn <- thisModule.get_CreatedOn(),
   			mode <- thisModule.get_Mode(), 
   			technicalBinding <- thisModule.get_TechnicalBinding(),
			createdBy <- thisModule.get_CreatedBy(),
			type <- thisModule.get_Type(),
			fromFileName <- 'ASD2WSDL.atl',
			
			iTraceModel <- thisModule.getTraceModelRoot
  		),
  
		elementSource1 : iTrace!SourceElement (	
			ref <- i.__xmiID__,
			type <- i.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getSourceModel
		),
			
		elementTarget1 : iTrace!TargetElement (	
	 		ref <- o.__xmiID__,
			type <- o.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getTargetModel
		)
		do{
			elementSource1.refSetValue('object', i);
			elementTarget1.refSetValue('object', o);
		}
-- ____________________ End Added by iTrace _________________________
}

lazy rule InfoType2MinInclusive{
	from
		i : ASD!InfoType
	to
		o : WSDL!MinInclusive(  
			value <- thisModule.getMinOccurs(i.valueRange) 
		)
-- ____________________ Begin Added by iTrace _________________________ 
		 ,
		
		TraceLink : iTrace!M2MLink (
   			ruleName <- 'InfoType2MinInclusive',
  			comment <- thisModule.get_Comment(), 
			createdOn <- thisModule.get_CreatedOn(),
   			mode <- thisModule.get_Mode(), 
   			technicalBinding <- thisModule.get_TechnicalBinding(),
			createdBy <- thisModule.get_CreatedBy(),
			type <- thisModule.get_Type(),
			fromFileName <- 'ASD2WSDL.atl',
			
			iTraceModel <- thisModule.getTraceModelRoot
  		),
  
		elementSource1 : iTrace!SourceElement (	
			type <- i.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getSourceModel
		),
			
		elementTarget1 : iTrace!TargetElement (	
	 		type <- o.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getTargetModel
		)
		do{
			elementSource1.refSetValue('object', i);
			elementTarget1.refSetValue('object', o);
		}
-- ____________________ End Added by iTrace _________________________
}


lazy rule InfoType2MaxInclusive{
	from
		i : ASD!InfoType
	to
		o : WSDL!MinInclusive(  
			value <- thisModule.getMaxOccurs(i.valueRange) 
		)
-- ____________________ Begin Added by iTrace _________________________ 
		 ,
		TraceLink : iTrace!M2MLink (
   			ruleName <- 'InfoType2MaxInclusive',
  			comment <- thisModule.get_Comment(), 
			createdOn <- thisModule.get_CreatedOn(),
   			mode <- thisModule.get_Mode(), 
   			technicalBinding <- thisModule.get_TechnicalBinding(),
			createdBy <- thisModule.get_CreatedBy(),
			type <- thisModule.get_Type(),
			fromFileName <- 'ASD2WSDL.atl',
			
			iTraceModel <- thisModule.getTraceModelRoot
  		),
  
		elementSource1 : iTrace!SourceElement (	
			type <- i.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getSourceModel
		),
			
		elementTarget1 : iTrace!TargetElement (	
	 		type <- o.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getTargetModel
		)
		do{
			elementSource1.refSetValue('object', i);
			elementTarget1.refSetValue('object', o);
		}
-- ____________________ End Added by iTrace _________________________
}



-- ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬
--	Incio:	iTrace Object2Ref4Elements
-- ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬

-- La transformación ha de ejecutarse con Regular VM.
-- Realmente el problema de obtener los __xmiID__ con esta máquina virtual
-- solo afecta a los elementos destino generados por una Lazy Rule.
--
-- Cuando referenciamos a un objeto origen desde la sección TO, nos devuelve
-- la referencia al elemento destino. Para obtener la refecian correcta
-- tenemos que usar "refSetValue" en la sección DO
--
-- Por simplicidad, vamos a obtener la referencia a todos los elementos,
-- ya sean source o target en la propiedad object (apunta a EObject) de
-- un TraceLinkElement (sourceElement o targetElement, según corresponda).
-- Posteriormente mediante la "endpoint rule", actualizamos la propiedad
-- ref de los TraceLinkElements con __xmiID__ del objeto almacenado
-- anteriormente. Finalmente, eliminamos la referencia al objeto (EObject)
-- para no tener problemas con el editor multipanel y porque realmente,
-- no la necesitamos.

--endpoint rule Object2Ref4Elements(){
--	using{
--		elements : Sequence(iTrace!TraceLinkElement) = 
--			iTrace!TraceLinkElement.allInstancesFrom('TRACE') 
--				-> select (e | not e.object.oclIsUndefined());
--		}
--	do{
--		for(e in elements){
--				e.ref <- e.object.__xmiID__;
				-- Movida para generar un OclUndefined que elimine la referencia al objeto que ya no necesitamos
--				 e.object <- e.refSetValue('object', thisModule.resolveTemp(e.object,'OclUndefined'));
--		}
--		thisModule.getTraceModelRoot.refreshRefs();	
--	}
--}

-- ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬
--	Fin:	iTrace Object2Ref4Elements
-- ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬

