module ASD2WSDL;
create OUT : WSDL from IN : ASD;

uses WSDLHelpersv1;

rule ServiceDescription2Definitions {
	from
		i : ASD!ServiceDescription
	to
		o : WSDL!Definitions (  
			name <- i.name,
			portType <- i.operations,
			message <- i.operations->collect(e|e.contents),
			types <- s
		),
		
		s : WSDL!ElementType(
			schema <- s2
		),
		
		s2: WSDL!Schema(
			complexType <- ASD!InfoType.allInstances()-> select(e| e.infoType.size()>1 and
			e.refImmediateComposite().oclType() = ASD!ServiceDescription),
			
			simpleType <- ASD!InfoType.allInstances()-> select(e| e.valueType <> #document and 
			e.oclType()<> ASD!InfoTypeImported and
			e.refImmediateComposite().oclType() = ASD!ServiceDescription),
			
			element <- ASD!InfoType.allInstances()-> select(e| e.infoType.size()=1 and
			e.refImmediateComposite().oclType() = ASD!ServiceDescription)
		)
}

rule Operation2PortTypeOperation {
	from
		i : ASD!Operation
	to
		o : WSDL!PortType(  
			operation <- pto
		),
		pto : WSDL!PortTypeOperation(  
			name <- i.name,
			output <- if i.contents->select(e|e.role=#output)->first()<> OclUndefined 
			 then thisModule.Message2PortTypeOutput(i.contents->select(e|e.role=#output)->first())
			 else OclUndefined endif,
			input <- if i.contents->select(e|e.role=#input)->first()<> OclUndefined 
			 then thisModule.Message2PortTypeInput(i.contents->select(e|e.role=#input)->first())
			 else OclUndefined endif,
			fault <- if i.contents->select(e|e.role=#fault)->first()<> OclUndefined 
			 then thisModule.getPortTypeFault(i.contents->select(e|e.role=#fault))
			 else Sequence{} endif
		)
}


rule Message2Mesage{
	from
		i : ASD!Message
	to
		m : WSDL!Message(  
			name <- i.name,
			part<-thisModule.getParts(i.infoType)
		)
}

rule InfoTypeImported2ElementImported{
	from
		i : ASD!InfoTypeImported(
			i.oclType()= ASD!InfoTypeImported
		)
	to
		o : WSDL!ElementImported(  
			name <- i.name,
			url <- i.url
		)	
}

rule InfoType2ComplexType{
	from
		i : ASD!InfoType(
			i.valueType = #document and i.oclType()<> ASD!InfoTypeImported and
			i.infoType.size()> 1 
		)
	to
		o : WSDL!ComplexType(  
			name <- i.name,
			sequenceDef <- s
		),
		
		s: WSDL!SequenceType(  
			element <- ASD!InfoType.allInstances()-> select(e| e.valueType <> #document and 
			e.oclType()<> ASD!InfoTypeImported and
			e.refImmediateComposite().oclType() <> ASD!ServiceDescription)
		)
}


rule InfoType2SimpleType{
	from
		i : ASD!InfoType(
			i.valueType <> #document and 
			i.oclType()<> ASD!InfoTypeImported and 
			if i.refImmediateComposite().oclType() = ASD!ServiceDescription then
				if i.eContents()= Sequence{} then
					true
				else
					false
				endif
			else 
				if i.refImmediateComposite().infoType.size()=1 then
					true
				else
					false
				endif
			endif
		)
	to
		o : WSDL!SimpleType(  
			name <- i.name,
			restriction <- o1
		),
		o1: WSDL!Restriction(
			primitiveType <- i.valueType.toString(),
			minInclusive <- if i.valueRange = '' then OclUndefined else thisModule.InfoType2MinInclusive(i) endif,
			maxInclusive <- if i.valueRange = '' then OclUndefined else thisModule.InfoType2axInclusive(i) endif
		)
}

rule InfoType2Element{
	from
		i : ASD!InfoType(
			i.oclType()<> ASD!InfoTypeImported and 
			if i.refImmediateComposite().oclType() = ASD!ServiceDescription then
				if i.eContents().size() =1  then
					true
				else
					false
				endif
			else 
				if i.refImmediateComposite().infoType.size()>1 then
					true
				else
					false
				endif
			endif 
		)
	to
		o : WSDL!Element(  
			name <- i.name,
			primitiveType <- if thisModule.getNameTypeOfElement(ASD!InfoType.allInstances(), i.name)= OclUndefined then
							    i.valueType.toString()
							 else
							 	OclUndefined
							 endif,
							
			type <- if thisModule.getNameTypeOfElement(ASD!InfoType.allInstances(), i.name)<> OclUndefined then 
						if i.ref <> OclUndefined then
							if i.ref->collect(e2|e2.name)->excludes(i.name) then
								thisModule.getNameTypeOfElement(ASD!InfoType.allInstances(), i.name)->first()
							else
								OclUndefined
							endif
						else
							thisModule.getNameTypeOfElement(ASD!InfoType.allInstances(), i.name)->first()
						endif
					else
						OclUndefined
					endif,
					
			simpleType <- i.infoType->select(e|e.valueType <> #document)->first(),
			
			complexType <- i.infoType->select(e|e.valueType = #document)->first(), 
			
			ref <- i.ref,
					
			minOccurs <- if i.valueRange = '' then OclUndefined
			 			 else thisModule.getMinOccurs(i.valueRange).toInteger()endif,
			maxOccurs <- if i.valueRange = '' then OclUndefined
			 			 else thisModule.getMaxOccurs(i.valueRange) endif
		)
}

lazy rule InfoType2Part{
	from
		i : ASD!InfoType
	to
		o : WSDL!Part( 
			type <- if i.oclType() <> ASD!InfoTypeImported then i->first() else OclUndefined endif,
			elementImported <- if i.oclType() = ASD!InfoTypeImported then i else OclUndefined endif
		)
}

lazy rule Message2PortTypeInput{
	from
		i : ASD!Message
	to
		o : WSDL!PortTypeInput(  
			message <- i
		)
}

lazy rule Message2PortTypeOutput{
	from
		i : ASD!Message
	to
		o : WSDL!PortTypeOutput(  
			message <- i
		)
}

lazy rule Message2PortTypeFault{
	from
		i : ASD!Message
	to
		o : WSDL!PortTypeFault(  
			message <- i
		)
}

lazy rule InfoType2MinInclusive{
	from
		i : ASD!InfoType
	to
		o : WSDL!MinInclusive(  
			value <- thisModule.getMinOccurs(i.valueRange) 
		)
}

lazy rule InfoType2MaxInclusive{
	from
		i : ASD!InfoType
	to
		o : WSDL!MinInclusive(  
			value <- thisModule.getMaxOccurs(i.valueRange) 
		)
}