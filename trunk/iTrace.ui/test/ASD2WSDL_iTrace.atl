-- @nsURI iTrace=http://www.kybele.es/iTrace
-- @path  ASD=
-- @path  WSDL=

module ASD2WSDL_iTrace;
create OUT : WSDL, TRACE : iTrace from  IN : ASD;

--_________________________Begin ATL Libraries _________________________

uses WSDLHelpersv1;

--_________________________End ATL Libraries _________________________



-- ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬
--	Incio:	iTrace: creación de la Raiz y Modelos con helper auxiliares
-- ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬

entrypoint rule CreateTraceModelRoot (){
to
	root : iTrace!iTraceModel
do {
	root.projectName <- 'ASD2WSDL';
	root.version <- '1.0';

--_________________________Asignación del root _________________________

	thisModule.getTraceModelRoot <- root;

--_________________________Llamada a los constructores de los modelos _________________________

	thisModule.createModel_ASD();
	thisModule.createModel_WSDL();
	}
}

helper def: getTraceModelRoot : iTrace!iTraceModel = OclUndefined;


--_________________________iTrace, begin creation rule for model ASD _________________________


rule createModel_ASD(){
to
	ASD : iTrace!Model (
		aspect <- 'null',
		name <- '',
		path <- '',
		abstractionLevel <- 'null',
		metamodel <- '',
		iTraceModel <- thisModule.getTraceModelRoot
	)
do {

	thisModule.getModel_ASD  <- ASD;
	}
}


helper def: getModel_ASD : iTrace!Model = OclUndefined;

--_________________________iTrace, end creation rule for model ASD _________________________


--_________________________iTrace, begin creation rule for model WSDL _________________________


rule createModel_WSDL(){
to
	WSDL : iTrace!Model (
		aspect <- 'null',
		name <- '',
		path <- '',
		abstractionLevel <- 'null',
		metamodel <- '',
		iTraceModel <- thisModule.getTraceModelRoot
	)
do {

	thisModule.getModel_WSDL  <- WSDL;
	}
}


helper def: getModel_WSDL : iTrace!Model = OclUndefined;

--_________________________iTrace, end creation rule for model WSDL _________________________

rule ServiceDescription2Definitions {
	from
		i : ASD!ServiceDescription
	to
		o : WSDL!Definitions (  
			name <- i.name,
			portType <- i.operations,
			message <- i.operations->collect(e|e.contents),
			types <- s
		),
		
		s : WSDL!ElementType(
			schema <- s2
		),
		
		s2: WSDL!Schema(
			complexType <- ASD!InfoType.allInstances()-> select(e| e.infoType.size()>1 and
			e.refImmediateComposite().oclType() = ASD!ServiceDescription),
			
			simpleType <- ASD!InfoType.allInstances()-> select(e| e.valueType <> #document and 
			e.oclType()<> ASD!InfoTypeImported and
			e.refImmediateComposite().oclType() = ASD!ServiceDescription),
			
			element <- ASD!InfoType.allInstances()-> select(e| e.infoType.size()=1 and
			e.refImmediateComposite().oclType() = ASD!ServiceDescription)
		)

-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'ServiceDescription2Definitions',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '09-11-2012',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_i : iTrace!SourceElement (
			type <- i.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ASD
		),
		elementTarget_o : iTrace!TargetElement (
			type <- o.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_WSDL
		),
		elementTarget_s : iTrace!TargetElement (
			type <- s.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_WSDL
		),
		elementTarget_s2 : iTrace!TargetElement (
			type <- s2.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_WSDL
		)

do {
		elementSource_i.refSetValue('object', i);
		elementTarget_o.refSetValue('object', o);
		elementTarget_s.refSetValue('object', s);
		elementTarget_s2.refSetValue('object', s2);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule Operation2PortTypeOperation {
	from
		i : ASD!Operation
	to
		o : WSDL!PortType(  
			operation <- pto
		),
		pto : WSDL!PortTypeOperation(  
			name <- i.name,
			output <- if i.contents->select(e|e.role=#output)->first()<> OclUndefined 
			 then thisModule.Message2PortTypeOutput(i.contents->select(e|e.role=#output)->first())
			 else OclUndefined endif,
			input <- if i.contents->select(e|e.role=#input)->first()<> OclUndefined 
			 then thisModule.Message2PortTypeInput(i.contents->select(e|e.role=#input)->first())
			 else OclUndefined endif,
			fault <- if i.contents->select(e|e.role=#fault)->first()<> OclUndefined 
			 then thisModule.getPortTypeFault(i.contents->select(e|e.role=#fault))
			 else Sequence{} endif
		)

-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'Operation2PortTypeOperation',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '09-11-2012',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_i : iTrace!SourceElement (
			type <- i.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ASD
		),
		elementTarget_o : iTrace!TargetElement (
			type <- o.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_WSDL
		),
		elementTarget_pto : iTrace!TargetElement (
			type <- pto.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_WSDL
		)

do {
		elementSource_i.refSetValue('object', i);
		elementTarget_o.refSetValue('object', o);
		elementTarget_pto.refSetValue('object', pto);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule Message2Mesage{
	from
		i : ASD!Message
	to
		m : WSDL!Message(  
			name <- i.name,
			part<-thisModule.getParts(i.infoType)
		)

-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'Message2Mesage{',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '09-11-2012',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_i : iTrace!SourceElement (
			type <- i.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ASD
		),
		elementTarget_m : iTrace!TargetElement (
			type <- m.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_WSDL
		)

do {
		elementSource_i.refSetValue('object', i);
		elementTarget_m.refSetValue('object', m);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule InfoTypeImported2ElementImported{
	from
		i : ASD!InfoTypeImported(
			i.oclType()= ASD!InfoTypeImported
		)
	to
		o : WSDL!ElementImported(  
			name <- i.name,
			url <- i.url
		)	

-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'InfoTypeImported2ElementImported{',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '09-11-2012',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_i : iTrace!SourceElement (
			type <- i.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ASD
		),
		elementTarget_o : iTrace!TargetElement (
			type <- o.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_WSDL
		)

do {
		elementSource_i.refSetValue('object', i);
		elementTarget_o.refSetValue('object', o);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule InfoType2ComplexType{
	from
		i : ASD!InfoType(
			i.valueType = #document and i.oclType()<> ASD!InfoTypeImported and
			i.infoType.size()> 1 
		)
	to
		o : WSDL!ComplexType(  
			name <- i.name,
			sequenceDef <- s
		),
		
		s: WSDL!SequenceType(  
			element <- ASD!InfoType.allInstances()-> select(e| e.valueType <> #document and 
			e.oclType()<> ASD!InfoTypeImported and
			e.refImmediateComposite().oclType() <> ASD!ServiceDescription)
		)

-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'InfoType2ComplexType{',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '09-11-2012',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_i : iTrace!SourceElement (
			type <- i.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ASD
		),
		elementTarget_o : iTrace!TargetElement (
			type <- o.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_WSDL
		),
		elementTarget_s : iTrace!TargetElement (
			type <- s.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_WSDL
		)

do {
		elementSource_i.refSetValue('object', i);
		elementTarget_o.refSetValue('object', o);
		elementTarget_s.refSetValue('object', s);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule InfoType2SimpleType{
	from
		i : ASD!InfoType(
			i.valueType <> #document and 
			i.oclType()<> ASD!InfoTypeImported and 
			if i.refImmediateComposite().oclType() = ASD!ServiceDescription then
				if i.eContents()= Sequence{} then
					true
				else
					false
				endif
			else 
				if i.refImmediateComposite().infoType.size()=1 then
					true
				else
					false
				endif
			endif
		)
	to
		o : WSDL!SimpleType(  
			name <- i.name,
			restriction <- o1
		),
		o1: WSDL!Restriction(
			primitiveType <- i.valueType.toString(),
			minInclusive <- if i.valueRange = '' then OclUndefined else thisModule.InfoType2MinInclusive(i) endif,
			maxInclusive <- if i.valueRange = '' then OclUndefined else thisModule.InfoType2axInclusive(i) endif
		)

-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'InfoType2SimpleType{',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '09-11-2012',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_i : iTrace!SourceElement (
			type <- i.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ASD
		),
		elementTarget_o : iTrace!TargetElement (
			type <- o.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_WSDL
		),
		elementTarget_o1 : iTrace!TargetElement (
			type <- o1.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_WSDL
		)

do {
		elementSource_i.refSetValue('object', i);
		elementTarget_o.refSetValue('object', o);
		elementTarget_o1.refSetValue('object', o1);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule InfoType2Element{
	from
		i : ASD!InfoType(
			i.oclType()<> ASD!InfoTypeImported and 
			if i.refImmediateComposite().oclType() = ASD!ServiceDescription then
				if i.eContents().size() =1  then
					true
				else
					false
				endif
			else 
				if i.refImmediateComposite().infoType.size()>1 then
					true
				else
					false
				endif
			endif 
		)
	to
		o : WSDL!Element(  
			name <- i.name,
			primitiveType <- if thisModule.getNameTypeOfElement(ASD!InfoType.allInstances(), i.name)= OclUndefined then
							    i.valueType.toString()
							 else
							 	OclUndefined
							 endif,
							
			type <- if thisModule.getNameTypeOfElement(ASD!InfoType.allInstances(), i.name)<> OclUndefined then 
						if i.ref <> OclUndefined then
							if i.ref->collect(e2|e2.name)->excludes(i.name) then
								thisModule.getNameTypeOfElement(ASD!InfoType.allInstances(), i.name)->first()
							else
								OclUndefined
							endif
						else
							thisModule.getNameTypeOfElement(ASD!InfoType.allInstances(), i.name)->first()
						endif
					else
						OclUndefined
					endif,
					
			simpleType <- i.infoType->select(e|e.valueType <> #document)->first(),
			
			complexType <- i.infoType->select(e|e.valueType = #document)->first(), 
			
			ref <- i.ref,
					
			minOccurs <- if i.valueRange = '' then OclUndefined
			 			 else thisModule.getMinOccurs(i.valueRange).toInteger()endif,
			maxOccurs <- if i.valueRange = '' then OclUndefined
			 			 else thisModule.getMaxOccurs(i.valueRange) endif
		)

-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'InfoType2Element{',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '09-11-2012',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_i : iTrace!SourceElement (
			type <- i.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ASD
		),
		elementTarget_o : iTrace!TargetElement (
			type <- o.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_WSDL
		)

do {
		elementSource_i.refSetValue('object', i);
		elementTarget_o.refSetValue('object', o);
	}
}

-- ____________________ End Added by iTrace  _________________________


lazy rule InfoType2Part{
	from
		i : ASD!InfoType
	to
		o : WSDL!Part( 
			type <- if i.oclType() <> ASD!InfoTypeImported then i->first() else OclUndefined endif,
			elementImported <- if i.oclType() = ASD!InfoTypeImported then i else OclUndefined endif
		)

-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'InfoType2Part{',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '09-11-2012',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_i : iTrace!SourceElement (
			type <- i.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ASD
		),
		elementTarget_o : iTrace!TargetElement (
			type <- o.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_WSDL
		)

do {
		elementSource_i.refSetValue('object', i);
		elementTarget_o.refSetValue('object', o);
	}
}

-- ____________________ End Added by iTrace  _________________________


lazy rule Message2PortTypeInput{
	from
		i : ASD!Message
	to
		o : WSDL!PortTypeInput(  
			message <- i
		)

-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'Message2PortTypeInput{',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '09-11-2012',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_i : iTrace!SourceElement (
			type <- i.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ASD
		),
		elementTarget_o : iTrace!TargetElement (
			type <- o.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_WSDL
		)

do {
		elementSource_i.refSetValue('object', i);
		elementTarget_o.refSetValue('object', o);
	}
}

-- ____________________ End Added by iTrace  _________________________


lazy rule Message2PortTypeOutput{
	from
		i : ASD!Message
	to
		o : WSDL!PortTypeOutput(  
			message <- i
		)

-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'Message2PortTypeOutput{',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '09-11-2012',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_i : iTrace!SourceElement (
			type <- i.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ASD
		),
		elementTarget_o : iTrace!TargetElement (
			type <- o.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_WSDL
		)

do {
		elementSource_i.refSetValue('object', i);
		elementTarget_o.refSetValue('object', o);
	}
}

-- ____________________ End Added by iTrace  _________________________


lazy rule Message2PortTypeFault{
	from
		i : ASD!Message
	to
		o : WSDL!PortTypeFault(  
			message <- i
		)

-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'Message2PortTypeFault{',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '09-11-2012',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_i : iTrace!SourceElement (
			type <- i.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ASD
		),
		elementTarget_o : iTrace!TargetElement (
			type <- o.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_WSDL
		)

do {
		elementSource_i.refSetValue('object', i);
		elementTarget_o.refSetValue('object', o);
	}
}

-- ____________________ End Added by iTrace  _________________________


lazy rule InfoType2MinInclusive{
	from
		i : ASD!InfoType
	to
		o : WSDL!MinInclusive(  
			value <- thisModule.getMinOccurs(i.valueRange) 
		)

-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'InfoType2MinInclusive{',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '09-11-2012',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_i : iTrace!SourceElement (
			type <- i.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ASD
		),
		elementTarget_o : iTrace!TargetElement (
			type <- o.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_WSDL
		)

do {
		elementSource_i.refSetValue('object', i);
		elementTarget_o.refSetValue('object', o);
	}
}

-- ____________________ End Added by iTrace  _________________________


lazy rule InfoType2MaxInclusive{
	from
		i : ASD!InfoType
	to
		o : WSDL!MinInclusive(  
			value <- thisModule.getMaxOccurs(i.valueRange) 
		)

-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'InfoType2MaxInclusive{',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '09-11-2012',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_i : iTrace!SourceElement (
			type <- i.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ASD
		),
		elementTarget_o : iTrace!TargetElement (
			type <- o.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_WSDL
		)

do {
		elementSource_i.refSetValue('object', i);
		elementTarget_o.refSetValue('object', o);
	}
}

-- ____________________ End Added by iTrace  _________________________


