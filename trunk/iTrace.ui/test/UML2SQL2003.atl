-- @nsURI 		UML=http://www.eclipse.org/uml2/2.1.0/UML
-- @nsURI 		SQL2003=http://SQL2003.ecore
-- @path 		AMW=/UML2SQL2003/Metamodels/ORAnnotationMeta.ecore

--BEGIN DOC
--#About
-- @name 		UML2SQL2003
-- @version		2.0
-- @domains		database, dsl, sql2003, uml, mda, amw, transformation,
--				metamodel, model
-- @authors		Alejandro Galindo (Universidad Rey Juan Carlos)
-- @date       	26-01-2009
-- @description	Este modelo ATL permite transformar un modelo de entrada
--				conforme al metamodelo UML en un modelo de salida conforme
--				al metamodelo SQL2003, teniendo en cuenta las anotaciones
--              del modelo de weaving definidas con AMW. Éstas recogen las
--              decisiones de diseño a aplicar.
--END DOC

module UML2SQL2003;
create OUT : SQL2003 from IN : UML, ANNOTATIONS : AMW;

-------------------------------------------------------------------------------
-- IMPORTS         ------------------------------------------------------------
-------------------------------------------------------------------------------

uses UML2SQL2003_constants;
uses UML2SQL2003_helpers;
uses UML2SQL2003_AMW; 
uses UML;

-------------------------------------------------------------------------------
-- RULES           ------------------------------------------------------------
-------------------------------------------------------------------------------

--BEGIN DOC
--#DESCRIPTION
--Esta regla genera un elemento de salida 'Schema' por cada elemento 
--de entrada 'Package' del modelo de entrada, asignándole como nombre
--el nombre del paquete.
--END DOC
rule Package2Schema 

{
	from 
		p : UML!Package
	to 
		s : SQL2003!Schema (
			name <- p.name
		)
}



--BEGIN DOC
--#DESCRIPTION
--Esta regla genera un elemento de salida 'BinaryStringType'
--asociado al tipo BINARYLARGEOBJECT de SQL2003
--por cada elemento de entrada 'PrimitiveType' asociado al tipo imagen de UML.
--
--@LIBRARIES UML, UML_constants, SQL2003_constants
--END DOC
rule Image2BinaryStringType 
{
	from
		dt : UML!PrimitiveType (dt.isImagePT())
	to
		out : SQL2003!BinaryStringType (
			descriptor <- #BINARYLARGEOBJECT,
			schema <- thisModule.PACKAGE(),
			length_def <- thisModule.DEFAULT_BINARY_LENGTH_DEF()
		)
		do {
		t.name.debug('Image2BinaryStringType ');
	}
}

--BEGIN DOC
--#DESCRIPTION
--Esta regla genera un elemento de salida 'StructuredType'
--asociado al tipo estructurado de SQL2003
--por cada elemento de entrada 'DataType' asociado a un tipo de dato de UML.
--
--Se comprueba que el tipo de dato de entrada no sea ninguno de los predefinidos.
--
--En UML hay herencia múltiple pero en SQL:2003 sólo hay herencia simple,
--por eso se coge el primer elemento de la generalización nada más
--(sólo puede haber un padre). Además, éste debe ser un elemento 'DataType'.
--
--@LIBRARIES UML, UML_constants, UML2SQL2003_helpers
--END DOC

rule DataType2UDT {
	from 
		t : UML!DataType (not t.isPrimitiveDataType())
	to 
		udt : SQL2003!StructuredType (
			name <- t.getUDTName(),
			is_final <- t.isLeaf,
			is_instantiable <- not t.isAbstract,
			schema <- thisModule.PACKAGE(),
			super_type <- t.getUDTSuperType()
			--typed <- NO SE GENERA
		)
	do 
	{
		t.name.debug('rule DataType2UDT -> datatype ');
	}
}

--BEGIN DOC
--#DESCRIPTION
--Esta regla genera un elemento de salida 'Attribute'
--asociado al atributo de un tipo estructurado de SQL:2003
--por cada elemento de entrada 'Property'
--asociado al atributo de un tipo de dato de UML.
--
--La condición de guarda lo que hace es permitir ejecutar la regla solamente
--sobre los elementos 'Property' de un 'DataType' de entrada,
--ya que hay otros elementos que pueden contener elementos 'Property'
--
--@LIBRARIES UML, UML2SQL2003_helpers
--END DOC
