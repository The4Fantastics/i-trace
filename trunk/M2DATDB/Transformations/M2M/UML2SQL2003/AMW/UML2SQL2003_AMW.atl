-- @atlcompiler atl2006
-- @nsURI 		UML=http://www.eclipse.org/uml2/2.1.0/UML
-- @nsURI 		SQL2003=http://SQL2003.ecore
-- @path 		AMW=/UML2SQL2003/Metamodels/ORAnnotationMeta.ecore

--BEGIN DOC
--#About
-- @name 		UML2SQL2003_AMW
-- @version		1.0
-- @domains		database, dsl, sql2003, uml, mda, amw, transformation,
--				metamodel, model
-- @authors		Alejandro Galindo (Universidad Rey Juan Carlos)
-- @date       	18-03-2009
-- @description	Esta librería ATL da soporte a transformaciones realizadas
--				desde un modelo conforme al metamodelo UML a otro conforme
--              al estándar SQL:2003, utilizando para ello un modelo de 
--              weaving definido con AMW.
--END DOC

library UML2SQL2003_AMW;

-------------------------------------------------------------------------------
-- IMPORTS         ------------------------------------------------------------
-------------------------------------------------------------------------------

uses UML2SQL2003_AMW_constants;
uses UML2SQL2003_AMW_private;
uses UML;

-------------------------------------------------------------------------------
-- HELPERS         ------------------------------------------------------------
-------------------------------------------------------------------------------

--BEGIN DOC
--#DESCRIPTION
--Este helper indica si la propiedad de entrada tiene una anotación
--relacionada con su valor por defecto.
--
--@CONTEXT UML!Property
--@RETURN Boolean
--@LIBRARIES UML2SQL2003_AMW_private, UML2SQL2003_AMW_constants
--END DOC
helper context UML!Property def : hasDefaultValueAnnotation() : Boolean =
	if (self.hasAnnotatedModelElement()) then
		self.getAnnotation().hasProperty(thisModule.KEY_DEFAULT_VALUE())
	else
		false
	endif;


--BEGIN DOC
--#DESCRIPTION
--Este helper devuelve el valor de la anotación de la propiedad de entrada 
--relacionada con su valor por defecto.
--
--@CONTEXT UML!Property
--@RETURN Boolean
--@LIBRARIES UML2SQL2003_AMW_private, UML2SQL2003_AMW_constants
--#PRECONDITION
--La propiedad 'Property' tiene una anotación relacionada con su valor 
--por defecto.
--END DOC
helper context UML!Property def : getDefaultValueAnnotation() : String =
	self.getAnnotation().getAnnotationValue(thisModule.KEY_DEFAULT_VALUE());


--BEGIN DOC
--#DESCRIPTION
--Este helper indica si la propiedad de entrada tiene una anotación
--relacionada con una restricción sobre ella.
--
--@CONTEXT UML!Property
--@RETURN Boolean
--@LIBRARIES UML2SQL2003_AMW_constants, UML2SQL2003_AMW_private
--END DOC
helper context UML!Property def : hasRestrictionAnnotation() : Boolean =
	if (self.hasAnnotatedModelElement()) then
		if (self.getAnnotation().hasProperty(thisModule.KEY_RESTRICTION())) then
			(self.getRestrictionAnnotation()= thisModule.VALUE_PRIMARY_KEY()) or
			(self.getRestrictionAnnotation()= thisModule.VALUE_ALTERNATIVE_KEY()) or
			(self.getRestrictionAnnotation()= thisModule.VALUE_NOTNULL_ATTRIBUTE())
		else
			false
		endif
	else
		false
	endif;


--BEGIN DOC
--#DESCRIPTION
--Este helper indica si la propiedad de entrada tiene una anotación
--que indica que debe ser clave primaria.
--
--@CONTEXT UML!Property
--@RETURN Boolean
--@LIBRARIES UML2SQL2003_AMW_constants, UML2SQL2003_AMW_private
--END DOC
helper context UML!Property def : hasPrimaryKeyAnnotation() : Boolean =
	if (self.hasAnnotatedModelElement()) then
		self.getAnnotation().hasPropertyAndValue(
			thisModule.KEY_RESTRICTION(),
			thisModule.VALUE_PRIMARY_KEY()
		)
	else
		false
	endif;


--BEGIN DOC
--#DESCRIPTION
--Este helper indica si la propiedad de entrada tiene una anotación
--que indica que debe ser clave alternativa.
--
--@CONTEXT UML!Property
--@RETURN Boolean
--@LIBRARIES UML2SQL2003_AMW_constants, UML2SQL2003_AMW_private
--END DOC
helper context UML!Property def : hasAlternativeKeyAnnotation() : Boolean =
	if (self.hasAnnotatedModelElement()) then
		self.getAnnotation().hasPropertyAndValue(
			thisModule.KEY_RESTRICTION(),
			thisModule.VALUE_ALTERNATIVE_KEY()
		)
	else
		false
	endif;


--BEGIN DOC
--#DESCRIPTION
--Este helper indica si la propiedad de entrada tiene una anotación
--que indica que no debe ser nula (debe tener algún valor).
--
--@CONTEXT UML!Property
--@RETURN Boolean
--@LIBRARIES UML2SQL2003_AMW_constants, UML2SQL2003_AMW_private
--END DOC
helper context UML!Property def : hasNotNullAnnotation() : Boolean =
	if (self.hasAnnotatedModelElement()) then
		self.getAnnotation().hasPropertyAndValue(
			thisModule.KEY_RESTRICTION(),
			thisModule.VALUE_NOTNULL_ATTRIBUTE()
		)
	else
		false
	endif;
	

--BEGIN DOC
--#DESCRIPTION
--Este helper indica si la propiedad de entrada tiene una anotación
--que indica que es derivada.
--
--@CONTEXT UML!Property
--@RETURN Boolean
--@LIBRARIES UML2SQL2003_AMW_constants, UML2SQL2003_AMW_private
--END DOC
helper context UML!Property def : hasDerivedAttributeAnnotation() : Boolean =
	if (self.hasAnnotatedModelElement()) then
		if (self.getAnnotation().hasProperty(
				thisModule.KEY_DERIVED_ATTRIBUTE())) then
				
			(self.getDerivedAttributeAnnotation() = thisModule.VALUE_METHOD()) or
			(self.getDerivedAttributeAnnotation() = thisModule.VALUE_TRIGGER())
		else
			false
		endif
	else
		false
	endif;


--BEGIN DOC
--#DESCRIPTION
--Este helper indica si la propiedad de entrada tiene una anotación
--que indica que es derivada y debe mapearse a un método.
--
--@CONTEXT UML!Property
--@RETURN Boolean
--@LIBRARIES UML2SQL2003_AMW_constants, UML2SQL2003_AMW_private
--END DOC
helper context UML!Property def : isMapDerivedAttributeToMethod() : Boolean =
	if (self.hasDerivedAttributeAnnotation()) then
		self.getDerivedAttributeAnnotation() = thisModule.VALUE_METHOD()
	else
		false
	endif;


--BEGIN DOC
--#DESCRIPTION
--Este helper indica si la propiedad de entrada tiene una anotación
--que indica que es derivada y debe mapearse a un disparador.
--
--@CONTEXT UML!Property
--@RETURN Boolean
--@LIBRARIES UML2SQL2003_AMW_constants, UML2SQL2003_AMW_private
--END DOC
helper context UML!Property def : isMapDerivedAttributeToTrigger() : Boolean =
	if (self.hasDerivedAttributeAnnotation()) then
		self.getDerivedAttributeAnnotation() = thisModule.VALUE_TRIGGER()
	else
		false
	endif;


--BEGIN DOC
--#DESCRIPTION
--Este helper indica si la propiedad multivaluada de entrada tiene una anotación
--que indica a qué tipo de colección se va a mapear: array o multiset
--
--@CONTEXT UML!Property
--@RETURN Boolean
--@LIBRARIES UML2SQL2003_AMW_constants, UML2SQL2003_AMW_private
--END DOC
helper context UML!Property def : hasMultivaluedAttributeAnnotation(): Boolean =
	if (self.hasAnnotatedModelElement()) then
		if (self.getAnnotation().hasProperty(
				thisModule.KEY_MULTIVALUED_ATTRIBUTE())) then
				
			(self.getMultivaluedAttributeAnnotation() = thisModule.VALUE_ARRAY()) or
			(self.getMultivaluedAttributeAnnotation() = thisModule.VALUE_MULTISET())
		else
			false
		endif
	else
		false
	endif;


--BEGIN DOC
--#DESCRIPTION
--Este helper indica si la propiedad multivaluada de entrada tiene una anotación
--que indica que debe mapearse a un array (colección de tamaño fijo).
--
--@CONTEXT UML!Property
--@RETURN Boolean
--@LIBRARIES UML2SQL2003_AMW_constants, UML2SQL2003_AMW_private
--END DOC
helper context UML!Property def : isMapMultivaluedAttributeToArray() : Boolean =
	if (self.hasMultivaluedAttributeAnnotation()) then
		self.getMultivaluedAttributeAnnotation() = thisModule.VALUE_ARRAY()
	else
		false
	endif;


--BEGIN DOC
--#DESCRIPTION
--Este helper indica si la propiedad multivaluada de entrada tiene una anotación
--que indica que debe mapearse a un multiset (colección de tamaño variable).
--
--@CONTEXT UML!Property
--@RETURN Boolean
--@LIBRARIES UML2SQL2003_AMW_constants, UML2SQL2003_AMW_private
--END DOC
helper context UML!Property def : isMapMultivaluedAttributeToMultiset() : Boolean =
	if (self.hasMultivaluedAttributeAnnotation()) then
		self.getMultivaluedAttributeAnnotation() = thisModule.VALUE_MULTISET()
	else
		false
	endif;


--BEGIN DOC
--#DESCRIPTION
--Este helper indica si la propiedad multivaluada de entrada tiene una anotación
--que indica el tamaño de la colección (array) a la que mapea.
--
--@CONTEXT UML!Property
--@RETURN Boolean
--@LIBRARIES UML2SQL2003_AMW_constants, UML2SQL2003_AMW_private
--END DOC
helper context UML!Property def : hasSizeAnnotation() : Boolean =
	if (self.hasAnnotatedModelElement()) then
		if (self.getAnnotation().hasProperty(thisModule.KEY_SIZE())) then
			self.getSizeAnnotation() > 0
		else
			false
		endif
	else
		false
	endif;


--BEGIN DOC
--#DESCRIPTION
--Este helper devuelve el valor de la anotación de la propiedad multivaluada
--de entrada relacionada con el tamaño de la colección (array) a la que mapea.
--
--@CONTEXT UML!Property
--@RETURN Integer
--@LIBRARIES UML2SQL2003_AMW_constants, UML2SQL2003_AMW_private
--END DOC
helper context UML!Property def : getSizeAnnotation() : Integer =
	self.getAnnotation().getAnnotationValue(thisModule.KEY_SIZE()).toInteger();


--BEGIN DOC
--#DESCRIPTION
--Este helper indica si la clase de entrada tiene una anotación
--asociada al mapeo de jerarquías de clases en una o varias tablas.
--
--@CONTEXT UML!Class
--@RETURN Boolean
--@LIBRARIES UML2SQL2003_AMW_constants, UML2SQL2003_AMW_private
--END DOC
helper context UML!Class def : hasHierarchyAnnotation() : Boolean =			
	if (self.hasAnnotatedModelElement()) then
		if (self.getAnnotation().hasProperty(
				thisModule.KEY_HIERARCHY_MAPPING())) then
				
			(self.getHierarchyAnnotation()=thisModule.VALUE_MAP_TO_ONE_TABLE())	or
			(self.getHierarchyAnnotation()=thisModule.VALUE_MAP_TO_SEVERAL_TABLES())
		else
			false
		endif
	else
		false
	endif;


--BEGIN DOC
--#DESCRIPTION
--Este helper indica si la clase de entrada tiene una clase padre 
--que incluye una anotación que informa de cómo mapear la jerarquía.
--
--@CONTEXT UML!Class
--@RETURN Boolean
--@LIBRARIES UML
--END DOC
helper context UML!Class def: hasSuperClassWithHierarchyAnnotation() : Boolean =
	if (self.hasSuperClass()) then
		self.getFirstSuperClass().hasHierarchyAnnotation() and
		self.getFirstSuperClass().isLastHierarchy()
	else
		false
	endif;


--BEGIN DOC
--#DESCRIPTION
--Este helper indica si la clase de entrada tiene una anotación que 
--indica que la jerarquía donde es padre debe mapearse a una tabla.
--
--@CONTEXT UML!Class
--@RETURN Boolean
--@LIBRARIES UML2SQL2003_AMW_constants, UML2SQL2003_AMW_private
--END DOC
helper context UML!Class def : isMapClassToOneTable() : Boolean =
	if (
		self.hasHierarchyAnnotation() and
		self.isLastHierarchy()
	) then
		self.getHierarchyAnnotation() = thisModule.VALUE_MAP_TO_ONE_TABLE()
	else
		false
	endif;


--BEGIN DOC
--#DESCRIPTION
--Este helper indica si la clase de entrada es clase hija de otra que tiene una
--anotación para mapear la jerarquía en una única tabla.
--
--@CONTEXT UML!Class
--@RETURN Boolean
--@LIBRARIES UML
--END DOC
helper context UML!Class def : isChildOfClassToOneTable() : Boolean =
	if (self.hasSuperClass()) then
		self.getFirstSuperClass().isMapClassToOneTable()
	else
		false
	endif;


--BEGIN DOC
--#DESCRIPTION
--Este helper indica si la clase de entrada es clase hija de otra que tiene una
--anotación para mapear la jerarquía en varias tablas.
--
--@CONTEXT UML!Class
--@RETURN Boolean
--@LIBRARIES UML
--END DOC
helper context UML!Class def : isChildOfClassToSeveralTables() : Boolean =
	if (self.hasSuperClass()) then
		self.getFirstSuperClass().isMapClassToSeveralTables()
	else
		false
	endif;


--BEGIN DOC
--#DESCRIPTION
--Este helper indica si la clase de entrada tiene una anotación que 
--indica que la jerarquía donde es padre debe mapearse a varias tablas, o si no
--la tiene, que tampoco tiene generalización.
--
--@CONTEXT UML!Class
--@RETURN Boolean
--@LIBRARIES UML2SQL2003_AMW_constants, UML2SQL2003_AMW_private, UML
--END DOC
helper context UML!Class def : isMapClassToSeveralTables() : Boolean =
	if (
		self.hasHierarchyAnnotation() and
		self.isLastHierarchy()
	) then
		self.getHierarchyAnnotation() = thisModule.VALUE_MAP_TO_SEVERAL_TABLES()
	else
		not self.hasSpecializationInfo() and (not self.isAbstract)
	endif;


--BEGIN DOC
--#DESCRIPTION
--Este helper retorna la clase a la que pertence una propiedad u operación.
--Si esta clase tiene clase padre y la jerarquía se mapea a una sola tabla
--se devuelve la clase padre.
--
--@CONTEXT UML!Feature
--@RETURN UML!Class
--@LIBRARIES UML
--END DOC
helper context UML!Feature def: getOwningClass() : UML!Class =
	if (self->refImmediateComposite().hasSuperClass()) then
		if (self->refImmediateComposite().getFirstSuperClass().
				isMapClassToOneTable()) then
			self->refImmediateComposite().getFirstSuperClass()		
		else
			self->refImmediateComposite()
		endif
	else
		self.refImmediateComposite()
	endif;
 

--BEGIN DOC
--#DESCRIPTION
--Este helper indica si la anotación de entrada impone una restricción de clave
--primaria a algún elemento anotado (a alguna propiedad del modelo de entrada).
--
--@CONTEXT AMW!Annotation
--@RETURN Boolean
--@LIBRARIES UML2SQL2003_AMW_constants, UML2SQL2003_AMW_private
--END DOC
helper context AMW!Annotation def: isPrimaryKeyAnnotation() : Boolean =
	if (self.hasAnnotatedModelElement()) then
		self.hasPropertyAndValue(
			thisModule.KEY_RESTRICTION(),
			thisModule.VALUE_PRIMARY_KEY()
		)
	else
		false
	endif;


--BEGIN DOC
--#DESCRIPTION
--Este helper indica si la anotación de entrada impone una restricción de clave
--alternativa a algún elemento anotado (a alguna propiedad del modelo de entrada).
--
--@CONTEXT AMW!Annotation
--@RETURN Boolean
--@LIBRARIES UML2SQL2003_AMW_constants, UML2SQL2003_AMW_private
--END DOC
helper context AMW!Annotation def: isAlternativeKeyAnnotation() : Boolean =
	if (self.hasAnnotatedModelElement()) then
		self.hasPropertyAndValue(
			thisModule.KEY_RESTRICTION(),
			thisModule.VALUE_ALTERNATIVE_KEY()
		)
	else
		false
	endif;


--BEGIN DOC
--#DESCRIPTION
--Este helper devuelve las propiedades anotadas por la 
--anotación del modelo de weaving de entrada.
--
--@CONTEXT AMW!AnnotatedModelElement
--@RETURN UML!Property
--@LIBRARIES UML_constants
--END DOC
helper context AMW!AnnotatedModelElement def: getAssociatedProperty() : 
		UML!Property =
			
	thisModule.PROPERTIES()->select(p | p.__xmiID__ = self.element.ref)->first();


--BEGIN DOC
--#DESCRIPTION
--Este helper devuelve las propiedades anotadas por la 
--anotación del modelo de weaving de entrada.
--
--@CONTEXT AMW!Annotation
--@RETURN Sequence(UML!Property)
--@LIBRARIES UML_constants
--END DOC
helper context AMW!Annotation def: getReferredProperties() : Sequence(UML!Property)=
   let refs : Sequence(String) = self.annotatedModelElement->collect(e | e.element.ref)
   in
      thisModule.CLASS_PROPERTIES()->select (p | refs->includes(p.__xmiID__));