module UML2SQL2003;
create OUT : SQL2003 from IN : UML, ANNOTATIONS : AMW;


endpoint rule generateTypes(){
	to 
		datetime_timewithtimezone : SQL2003!DatetimeType (
 			descriptor <-#TIMEWITHTIMEZONE,
			schema <- thisModule.PACKAGE()
		),
		datetime_timewithouttimezone : SQL2003!DatetimeType (
 			descriptor <-#TIMEWITHOUTTIMEZONE,
			schema <- thisModule.PACKAGE()
		),
		datetime_timestampwithouttimezone : SQL2003!DatetimeType (
 			descriptor <-#TIMESTAMPWITHOUTTIMEZONE,
			schema <- thisModule.PACKAGE()
		),
		datetime_timestampwithtimezone : SQL2003!DatetimeType (
 			descriptor <-#TIMESTAMPWITHTIMEZONE,
			schema <- thisModule.PACKAGE()
		),
		characterstring_clob : SQL2003!CharacterStringType (
 			descriptor <-#CHARACTERLARGEOBJECT,
			schema <- thisModule.PACKAGE(),
			length_def <- thisModule.DEFAULT_STRING_LENGTH_DEF()
		),
		numeric_numeric : SQL2003!NumericType (
 			descriptor <-#NUMERIC,
			schema <- thisModule.PACKAGE()
		),
		numeric_decimal : SQL2003!NumericType (
 			descriptor <-#DECIMAL,
			schema <- thisModule.PACKAGE()
		),
		numeric_smallint : SQL2003!NumericType (
 			descriptor <-#SMALLINT,
			schema <- thisModule.PACKAGE()
		),
		numeric_bigint : SQL2003!NumericType (
 			descriptor <-#BIGINT,
			schema <- thisModule.PACKAGE()
		),
		numeric_float : SQL2003!NumericType (
 			descriptor <-#FLOAT,
			schema <- thisModule.PACKAGE()
		),
		numeric_doubleprecision : SQL2003!NumericType (
 			descriptor <-#DOUBLEPRECISION,
			schema <- thisModule.PACKAGE()
		),
		interval_yearmonth : SQL2003!IntervalType (
 			descriptor <-#YEAR_MONTH,
			schema <- thisModule.PACKAGE()
		),
		interval_dayhour : SQL2003!IntervalType (
 			descriptor <-#DAY_HOUR,
			schema <- thisModule.PACKAGE()
		),
		interval_dayminute : SQL2003!IntervalType (
 			descriptor <-#DAY_MINUTE,
			schema <- thisModule.PACKAGE()
		),
		interval_daysecond : SQL2003!IntervalType (
 			descriptor <-#DAY_SECOND,
			schema <- thisModule.PACKAGE()
		),
		interval_hourminute : SQL2003!IntervalType (
 			descriptor <-#HOUR_MINUTE,
			schema <- thisModule.PACKAGE()
		),
		interval_hoursecond : SQL2003!IntervalType (
 			descriptor <-#HOUR_SECOND,
			schema <- thisModule.PACKAGE()
		),
		interval_minutesecond : SQL2003!IntervalType (
 			descriptor <-#MINUTE_SECOND,
			schema <- thisModule.PACKAGE()
		),
		interval_year : SQL2003!IntervalType (
 			descriptor <-#YEAR,
			schema <- thisModule.PACKAGE()
		),
		interval_month : SQL2003!IntervalType (
 			descriptor <-#MONTH,
			schema <- thisModule.PACKAGE()
		),
		interval_day : SQL2003!IntervalType (
 			descriptor <-#DAY,
			schema <- thisModule.PACKAGE()
		),
		interval_hour : SQL2003!IntervalType (
 			descriptor <-#HOUR,
			schema <- thisModule.PACKAGE()
		),
		interval_minute : SQL2003!IntervalType (
 			descriptor <-#MINUTE,
			schema <- thisModule.PACKAGE()
		),
		interval_second : SQL2003!IntervalType (
 			descriptor <-#SECOND,
			schema <- thisModule.PACKAGE()
		),
		binarystring_binary : SQL2003!BinaryStringType (
 			descriptor <-#BINARY,
			schema <- thisModule.PACKAGE(),
			length_def <- thisModule.DEFAULT_BINARY_LENGTH_DEF()
		),
		binarystring_binaryvarying : SQL2003!BinaryStringType (
 			descriptor <-#BINARYVARYING,
			schema <- thisModule.PACKAGE(),
			length_def <- thisModule.DEFAULT_BINARY_LENGTH_DEF()
		)
	do {
		if (thisModule.PRIMITIVE_TYPES()->
				any(e | e.isXMLPT())->oclIsUndefined()) {
			thisModule.generateEmptyXMLType(thisModule.PACKAGE());
		}
		if (thisModule.PRIMITIVE_TYPES()->
				any(e | e.isBooleanPT())->oclIsUndefined()) {
			thisModule.generateEmptyBooleanType(thisModule.PACKAGE());
		}
		if (thisModule.PRIMITIVE_TYPES()->
				any(e | e.isStringPT())->oclIsUndefined()) {
			if (thisModule.CLASSES()->
				select(c | c.isSuperClassWithOneTableHierarchy())->size() = 0)
			{
				thisModule.generateEmptyCharacterVaryingType(thisModule.PACKAGE());
			}
		}
		if (thisModule.PRIMITIVE_TYPES()->
				any(e | e.isCharPT())->oclIsUndefined()) {
			thisModule.generateEmptyCharacterType(thisModule.PACKAGE());
		}
		if (thisModule.PRIMITIVE_TYPES()->
				any(e | e.isDatePT())->oclIsUndefined()) {
			thisModule.generateEmptyDateType(thisModule.PACKAGE());
		}
		if (thisModule.PRIMITIVE_TYPES()->
				any(e | e.isIntegerPT())->oclIsUndefined()) {
			thisModule.generateEmptyIntegerType(thisModule.PACKAGE());
		}
		if (thisModule.PRIMITIVE_TYPES()->
				any(e | e.isRealPT())->oclIsUndefined()) {
			thisModule.generateEmptyRealType(thisModule.PACKAGE());
		}
		if (thisModule.PRIMITIVE_TYPES()->
				any(e | e.isImagePT())->oclIsUndefined()) {
			thisModule.generateEmptyBinaryStringType(thisModule.PACKAGE());
		}
	}
}