-- @nsURI iTrace=http://www.kybele.es/iTrace
-- @path  UML=D:/Thesis/Eclipse/Juno/dropins/s
-- @path  AMW=D:/Thesis/Eclipse/Juno/dropins/d
-- @path  SQL2003=D:/Thesis/Eclipse/Juno/dropins/a

module UML2SQL2003_iTrace;
create OUT : SQL2003, TRACE : iTrace from  IN : UML, ANNOTATIONS : AMW;

-- ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬
--	Incio:	iTrace: creación de la Raiz y Modelos con helper auxiliares
-- ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬

entrypoint rule CreateTraceModelRoot (){
to
	root : iTrace!iTraceModel
do {
	root.projectName <- 'UML2SQL2003';
	root.version <- '1.0';

--_________________________Asignación del root _________________________

	thisModule.getTraceModelRoot <- root;

--_________________________Llamada a los constructores de los modelos _________________________

	thisModule.createModel_UML();
	thisModule.createModel_AMW();
	thisModule.createModel_SQL2003();
	}
}

helper def: getTraceModelRoot : iTrace!iTraceModel = OclUndefined;


--_________________________iTrace, begin creation rule for model UML _________________________


rule createModel_UML(){
to
	UML : iTrace!Model (
		aspect <- 'Unspecified',
		name <- 's',
		path <- 'D:/Thesis/Eclipse/Juno/dropins/s',
		abstractionLevel <- 'UNSPECIFIED',
		metamodel <- 'D:/Thesis/Eclipse/Juno/dropins/s',
		iTraceModel <- thisModule.getTraceModelRoot
	)
do {

	thisModule.getModel_UML  <- UML;
	}
}


helper def: getModel_UML : iTrace!Model = OclUndefined;

--_________________________iTrace, end creation rule for model UML _________________________


--_________________________iTrace, begin creation rule for model AMW _________________________


rule createModel_AMW(){
to
	AMW : iTrace!Model (
		aspect <- 'Unspecified',
		name <- 'd',
		path <- 'D:/Thesis/Eclipse/Juno/dropins/d',
		abstractionLevel <- 'UNSPECIFIED',
		metamodel <- 'D:/Thesis/Eclipse/Juno/dropins/d',
		iTraceModel <- thisModule.getTraceModelRoot
	)
do {

	thisModule.getModel_AMW  <- AMW;
	}
}


helper def: getModel_AMW : iTrace!Model = OclUndefined;

--_________________________iTrace, end creation rule for model AMW _________________________


--_________________________iTrace, begin creation rule for model SQL2003 _________________________


rule createModel_SQL2003(){
to
	SQL2003 : iTrace!Model (
		aspect <- 'Unspecified',
		name <- 'a',
		path <- 'D:/Thesis/Eclipse/Juno/dropins/a',
		abstractionLevel <- 'UNSPECIFIED',
		metamodel <- 'D:/Thesis/Eclipse/Juno/dropins/a',
		iTraceModel <- thisModule.getTraceModelRoot
	)
do {

	thisModule.getModel_SQL2003  <- SQL2003;
	}
}


helper def: getModel_SQL2003 : iTrace!Model = OclUndefined;

--_________________________iTrace, end creation rule for model SQL2003 _________________________

endpoint rule generateTypes(){
	to 
		datetime_timewithtimezone : SQL2003!DatetimeType (
 			descriptor <-#TIMEWITHTIMEZONE,
			schema <- thisModule.PACKAGE()
		),
		datetime_timewithouttimezone : SQL2003!DatetimeType (
 			descriptor <-#TIMEWITHOUTTIMEZONE,
			schema <- thisModule.PACKAGE()
		),
		datetime_timestampwithouttimezone : SQL2003!DatetimeType (
 			descriptor <-#TIMESTAMPWITHOUTTIMEZONE,
			schema <- thisModule.PACKAGE()
		),
		datetime_timestampwithtimezone : SQL2003!DatetimeType (
 			descriptor <-#TIMESTAMPWITHTIMEZONE,
			schema <- thisModule.PACKAGE()
		),
		characterstring_clob : SQL2003!CharacterStringType (
 			descriptor <-#CHARACTERLARGEOBJECT,
			schema <- thisModule.PACKAGE(),
			length_def <- thisModule.DEFAULT_STRING_LENGTH_DEF()
		),
		numeric_numeric : SQL2003!NumericType (
 			descriptor <-#NUMERIC,
			schema <- thisModule.PACKAGE()
		),
		numeric_decimal : SQL2003!NumericType (
 			descriptor <-#DECIMAL,
			schema <- thisModule.PACKAGE()
		),
		numeric_smallint : SQL2003!NumericType (
 			descriptor <-#SMALLINT,
			schema <- thisModule.PACKAGE()
		),
		numeric_bigint : SQL2003!NumericType (
 			descriptor <-#BIGINT,
			schema <- thisModule.PACKAGE()
		),
		numeric_float : SQL2003!NumericType (
 			descriptor <-#FLOAT,
			schema <- thisModule.PACKAGE()
		),
		numeric_doubleprecision : SQL2003!NumericType (
 			descriptor <-#DOUBLEPRECISION,
			schema <- thisModule.PACKAGE()
		),
		interval_yearmonth : SQL2003!IntervalType (
 			descriptor <-#YEAR_MONTH,
			schema <- thisModule.PACKAGE()
		),
		interval_dayhour : SQL2003!IntervalType (
 			descriptor <-#DAY_HOUR,
			schema <- thisModule.PACKAGE()
		),
		interval_dayminute : SQL2003!IntervalType (
 			descriptor <-#DAY_MINUTE,
			schema <- thisModule.PACKAGE()
		),
		interval_daysecond : SQL2003!IntervalType (
 			descriptor <-#DAY_SECOND,
			schema <- thisModule.PACKAGE()
		),
		interval_hourminute : SQL2003!IntervalType (
 			descriptor <-#HOUR_MINUTE,
			schema <- thisModule.PACKAGE()
		),
		interval_hoursecond : SQL2003!IntervalType (
 			descriptor <-#HOUR_SECOND,
			schema <- thisModule.PACKAGE()
		),
		interval_minutesecond : SQL2003!IntervalType (
 			descriptor <-#MINUTE_SECOND,
			schema <- thisModule.PACKAGE()
		),
		interval_year : SQL2003!IntervalType (
 			descriptor <-#YEAR,
			schema <- thisModule.PACKAGE()
		),
		interval_month : SQL2003!IntervalType (
 			descriptor <-#MONTH,
			schema <- thisModule.PACKAGE()
		),
		interval_day : SQL2003!IntervalType (
 			descriptor <-#DAY,
			schema <- thisModule.PACKAGE()
		),
		interval_hour : SQL2003!IntervalType (
 			descriptor <-#HOUR,
			schema <- thisModule.PACKAGE()
		),
		interval_minute : SQL2003!IntervalType (
 			descriptor <-#MINUTE,
			schema <- thisModule.PACKAGE()
		),
		interval_second : SQL2003!IntervalType (
 			descriptor <-#SECOND,
			schema <- thisModule.PACKAGE()
		),
		binarystring_binary : SQL2003!BinaryStringType (
 			descriptor <-#BINARY,
			schema <- thisModule.PACKAGE(),
			length_def <- thisModule.DEFAULT_BINARY_LENGTH_DEF()
		),
		binarystring_binaryvarying : SQL2003!BinaryStringType (
 			descriptor <-#BINARYVARYING,
			schema <- thisModule.PACKAGE(),
			length_def <- thisModule.DEFAULT_BINARY_LENGTH_DEF()
		)
	

-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'generateTypes(){',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '27-3-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementTarget_datetime_timewithtimezone : iTrace!TargetElement (
			type <- datetime_timewithtimezone.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_datetime_timewithouttimezone : iTrace!TargetElement (
			type <- datetime_timewithouttimezone.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_datetime_timestampwithouttimezone : iTrace!TargetElement (
			type <- datetime_timestampwithouttimezone.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_datetime_timestampwithtimezone : iTrace!TargetElement (
			type <- datetime_timestampwithtimezone.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_characterstring_clob : iTrace!TargetElement (
			type <- characterstring_clob.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_numeric_numeric : iTrace!TargetElement (
			type <- numeric_numeric.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_numeric_decimal : iTrace!TargetElement (
			type <- numeric_decimal.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_numeric_smallint : iTrace!TargetElement (
			type <- numeric_smallint.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_numeric_bigint : iTrace!TargetElement (
			type <- numeric_bigint.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_numeric_float : iTrace!TargetElement (
			type <- numeric_float.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_numeric_doubleprecision : iTrace!TargetElement (
			type <- numeric_doubleprecision.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_interval_yearmonth : iTrace!TargetElement (
			type <- interval_yearmonth.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_interval_dayhour : iTrace!TargetElement (
			type <- interval_dayhour.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_interval_dayminute : iTrace!TargetElement (
			type <- interval_dayminute.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_interval_daysecond : iTrace!TargetElement (
			type <- interval_daysecond.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_interval_hourminute : iTrace!TargetElement (
			type <- interval_hourminute.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_interval_hoursecond : iTrace!TargetElement (
			type <- interval_hoursecond.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_interval_minutesecond : iTrace!TargetElement (
			type <- interval_minutesecond.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_interval_year : iTrace!TargetElement (
			type <- interval_year.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_interval_month : iTrace!TargetElement (
			type <- interval_month.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_interval_day : iTrace!TargetElement (
			type <- interval_day.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_interval_hour : iTrace!TargetElement (
			type <- interval_hour.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_interval_minute : iTrace!TargetElement (
			type <- interval_minute.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_interval_second : iTrace!TargetElement (
			type <- interval_second.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_binarystring_binary : iTrace!TargetElement (
			type <- binarystring_binary.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_binarystring_binaryvarying : iTrace!TargetElement (
			type <- binarystring_binaryvarying.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		)

do  {
		if (thisModule.PRIMITIVE_TYPES()->
				any(e | e.isXMLPT())->oclIsUndefined()) {
			thisModule.generateEmptyXMLType(thisModule.PACKAGE());
		}
		if (thisModule.PRIMITIVE_TYPES()->
				any(e | e.isBooleanPT())->oclIsUndefined()) {
			thisModule.generateEmptyBooleanType(thisModule.PACKAGE());
		}
		if (thisModule.PRIMITIVE_TYPES()->
				any(e | e.isStringPT())->oclIsUndefined()) {
			if (thisModule.CLASSES()->
				select(c | c.isSuperClassWithOneTableHierarchy())->size() = 0)
			{
				thisModule.generateEmptyCharacterVaryingType(thisModule.PACKAGE());
			}
		}
		if (thisModule.PRIMITIVE_TYPES()->
				any(e | e.isCharPT())->oclIsUndefined()) {
			thisModule.generateEmptyCharacterType(thisModule.PACKAGE());
		}
		if (thisModule.PRIMITIVE_TYPES()->
				any(e | e.isDatePT())->oclIsUndefined()) {
			thisModule.generateEmptyDateType(thisModule.PACKAGE());
		}
		if (thisModule.PRIMITIVE_TYPES()->
				any(e | e.isIntegerPT())->oclIsUndefined()) {
			thisModule.generateEmptyIntegerType(thisModule.PACKAGE());
		}
		if (thisModule.PRIMITIVE_TYPES()->
				any(e | e.isRealPT())->oclIsUndefined()) {
			thisModule.generateEmptyRealType(thisModule.PACKAGE());
		}
		if (thisModule.PRIMITIVE_TYPES()->
				any(e | e.isImagePT())->oclIsUndefined()) {
			thisModule.generateEmptyBinaryStringType(thisModule.PACKAGE());
		}
	

		elementTarget_datetime_timewithtimezone.refSetValue('object', datetime_timewithtimezone);
		elementTarget_datetime_timewithouttimezone.refSetValue('object', datetime_timewithouttimezone);
		elementTarget_datetime_timestampwithouttimezone.refSetValue('object', datetime_timestampwithouttimezone);
		elementTarget_datetime_timestampwithtimezone.refSetValue('object', datetime_timestampwithtimezone);
		elementTarget_characterstring_clob.refSetValue('object', characterstring_clob);
		elementTarget_numeric_numeric.refSetValue('object', numeric_numeric);
		elementTarget_numeric_decimal.refSetValue('object', numeric_decimal);
		elementTarget_numeric_smallint.refSetValue('object', numeric_smallint);
		elementTarget_numeric_bigint.refSetValue('object', numeric_bigint);
		elementTarget_numeric_float.refSetValue('object', numeric_float);
		elementTarget_numeric_doubleprecision.refSetValue('object', numeric_doubleprecision);
		elementTarget_interval_yearmonth.refSetValue('object', interval_yearmonth);
		elementTarget_interval_dayhour.refSetValue('object', interval_dayhour);
		elementTarget_interval_dayminute.refSetValue('object', interval_dayminute);
		elementTarget_interval_daysecond.refSetValue('object', interval_daysecond);
		elementTarget_interval_hourminute.refSetValue('object', interval_hourminute);
		elementTarget_interval_hoursecond.refSetValue('object', interval_hoursecond);
		elementTarget_interval_minutesecond.refSetValue('object', interval_minutesecond);
		elementTarget_interval_year.refSetValue('object', interval_year);
		elementTarget_interval_month.refSetValue('object', interval_month);
		elementTarget_interval_day.refSetValue('object', interval_day);
		elementTarget_interval_hour.refSetValue('object', interval_hour);
		elementTarget_interval_minute.refSetValue('object', interval_minute);
		elementTarget_interval_second.refSetValue('object', interval_second);
		elementTarget_binarystring_binary.refSetValue('object', binarystring_binary);
		elementTarget_binarystring_binaryvarying.refSetValue('object', binarystring_binaryvarying);
	}
}

-- ____________________ End Added by iTrace  _________________________


