-- @atlcompiler atl2006
-- @nsURI 		UML=http://www.eclipse.org/uml2/2.1.0/UML

--BEGIN DOC
--#About
-- @name 		UML_constants
-- @version		1.0
-- @domains		database, dsl, sql2003, uml, mda, transformation,
--				metamodel, model
-- @authors		Alejandro Galindo (Universidad Rey Juan Carlos)
-- @date       	24-03-2009
-- @description	Esta librería ATL contiene las constantes utilizadas en las
--				transformaciones realizadas	desde un modelo conforme 
--				al metamodelo UML.
--END DOC

library UML_constants;

-- Dentro de las librerías de ATL no se permite definir atributos o constantes.
-- Entonces, las constantes hay que definirlas como helpers.

--BEGIN DOC
--#DESCRIPTION
--Constante asociada al tipo primitivo de UML para representar cadenas de texto.
--END DOC
helper def : TYPE_STRING() : String = 'string';

--BEGIN DOC
--#DESCRIPTION
--Constante asociada al tipo primitivo de UML para representar caracteres.
--END DOC
helper def : TYPE_CHAR() : String = 'char';

--BEGIN DOC
--#DESCRIPTION
--Constante asociada al tipo primitivo de UML para representar números enteros.
--END DOC
helper def : TYPE_INTEGER() : String = 'integer';

--BEGIN DOC
--#DESCRIPTION
--Constante asociada al tipo primitivo de UML para representar fechas.
--END DOC
helper def : TYPE_DATE() : String = 'date';

--BEGIN DOC
--#DESCRIPTION
--Constante asociada al tipo primitivo de UML para representar valores booleanos.
--END DOC
helper def : TYPE_BOOLEAN() : String = 'boolean';

--BEGIN DOC
--#DESCRIPTION
--Constante asociada al tipo primitivo de UML para representar números reales.
--END DOC
helper def : TYPE_REAL() : String = 'real';

--BEGIN DOC
--#DESCRIPTION
--Constante asociada al tipo primitivo de UML para representar tipos XML.
--END DOC
helper def : TYPE_XML() : String = 'xml';

--BEGIN DOC
--#DESCRIPTION
--Constante asociada al tipo primitivo de UML para representar imágenes.
--END DOC
helper def : TYPE_IMAGE() : String = 'image';

--BEGIN DOC
--#DESCRIPTION
--Constante que hace referencia al paquete del modelo UML de entrada
--END DOC
helper def : PACKAGE() : UML!Package = 
	UML!Package.allInstances()->asSequence()->first();

--BEGIN DOC
--#DESCRIPTION
--Constante con el valor enumerado perteneciente a elementos incluidos 
--en más de un elemento hijo de una jerarquía. El valor está asociado al 
--atributo discriminante de la jerarquía.
--END DOC
helper def : DISCRIMINANT_OVERLAPPING() : String = '@overlapping@';

--BEGIN DOC
--#DESCRIPTION
--Constante que referencia al conjunto de los tipos primitivos
--del modelo de entrada.
--END DOC
helper def : PRIMITIVE_TYPES() : Set(UML!PrimitiveType) = 
	UML!PrimitiveType.allInstances();

--BEGIN DOC
--#DESCRIPTION
--Constante que referencia al conjunto de clases padres del modelo de entrada
--que tienen alguna relación de especialización.
--END DOC
helper def : PARENT_CLASSES() : Set(UML!Class) = 
	UML!Generalization->allInstances()->collect(g | g.general);

--BEGIN DOC
--#DESCRIPTION
--Constante que referencia al conjunto de toda clase de propiedades
--del modelo de entrada.
--END DOC
helper def : PROPERTIES() : Set(UML!Property) = 
	UML!Property.allInstances();

--BEGIN DOC
--#DESCRIPTION
--Constante que referencia al conjunto de propiedades de clases
--del modelo de entrada. Aqui no entran las propiedades producto
--de relaciones navegables (p.type seria de tipo UML!Class).
--END DOC
helper def : CLASS_PROPERTIES() : Set(UML!Property) = 
	thisModule.PROPERTIES()->
		select(p | p.refImmediateComposite().oclIsKindOf(UML!Class) and
				   (p.type.oclIsTypeOf(UML!DataType) or	
				   p.type.oclIsTypeOf(UML!PrimitiveType)));
			
--BEGIN DOC
--#DESCRIPTION
--Constante que referencia al conjunto de clases del modelo de entrada.
--END DOC
helper def : CLASSES() : Set(UML!Class) = UML!Class.allInstances();


--BEGIN DOC
--#DESCRIPTION
--Constante que referencia al conjunto de generalizaciones del modelo de entrada.
--END DOC
helper def : GENERALIZATIONS() : Set(UML!Generalization) = 
	UML!Generalization.allInstances();

--BEGIN DOC
--#DESCRIPTION
--Constante que almacena los extremos de las asociaciones del modelo de entrada.
--END DOC
helper def : MEMBERS_END() : Sequence(UML!Property) =
	let listAssoc : Sequence(UML!Property) = thisModule.PROPERTIES()->
		select(p | p.refImmediateComposite().oclIsKindOf(UML!Association))
	in
		let listNav : Sequence(UML!Property) = thisModule.PROPERTIES()->
			select(nav | nav.isAssociationNavigable())
		in
			listNav->union(listAssoc);