-- @nsURI iTrace=http://www.kybele.es/iTrace
-- @path  SQL2003=D:/Thesis/Eclipse/Juno/s
-- @path  ORDB4ORA=D:/Thesis/Eclipse/Juno/o

module SQL20032ORDB4ORA_iTrace;
create OUT : ORDB4ORA, TRACE : iTrace from  IN : SQL2003;

-- ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬
--	Incio:	iTrace: creación de la Raiz y Modelos con helper auxiliares
-- ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬

entrypoint rule CreateTraceModelRoot (){
to
	root : iTrace!iTraceModel
do {
	root.projectName <- 'SQL20032ORDB4ORA';
	root.version <- '1.0';

--_________________________Asignación del root _________________________

	thisModule.getTraceModelRoot <- root;

--_________________________Llamada a los constructores de los modelos _________________________

	thisModule.createModel_SQL2003();
	thisModule.createModel_ORDB4ORA();
	}
}

helper def: getTraceModelRoot : iTrace!iTraceModel = OclUndefined;


--_________________________iTrace, begin creation rule for model SQL2003 _________________________


rule createModel_SQL2003(){
to
	SQL2003 : iTrace!Model (
		aspect <- 'Unspecified',
		name <- 's',
		path <- 'D:/Thesis/Eclipse/Juno/s',
		abstractionLevel <- 'UNSPECIFIED',
		metamodel <- 'D:/Thesis/Eclipse/Juno/s',
		iTraceModel <- thisModule.getTraceModelRoot
	)
do {

	thisModule.getModel_SQL2003  <- SQL2003;
	}
}


helper def: getModel_SQL2003 : iTrace!Model = OclUndefined;

--_________________________iTrace, end creation rule for model SQL2003 _________________________


--_________________________iTrace, begin creation rule for model ORDB4ORA _________________________


rule createModel_ORDB4ORA(){
to
	ORDB4ORA : iTrace!Model (
		aspect <- 'Unspecified',
		name <- 'o',
		path <- 'D:/Thesis/Eclipse/Juno/o',
		abstractionLevel <- 'UNSPECIFIED',
		metamodel <- 'D:/Thesis/Eclipse/Juno/o',
		iTraceModel <- thisModule.getTraceModelRoot
	)
do {

	thisModule.getModel_ORDB4ORA  <- ORDB4ORA;
	}
}


helper def: getModel_ORDB4ORA : iTrace!Model = OclUndefined;

--_________________________iTrace, end creation rule for model ORDB4ORA _________________________

helper context SQL2003!Feature def: haveLegalTarget() : Boolean =
	if self.refImmediateComposite().type.oclIsKindOf(SQL2003!PredefinedType) then
		if self.refImmediateComposite().type.descriptor = #CHARACTER and self.key = #length then
			true
		else
			if self.refImmediateComposite().type.descriptor = #CHARACTER and self.key = #unit then
			true
		else
			if self.refImmediateComposite().type.descriptor = #CHARACTERVARYING and self.key = #length then
				true
			else
		if self.refImmediateComposite().type.descriptor = #CHARACTERVARYING and self.key = #unit then
			true
		else
			if self.refImmediateComposite().type.descriptor = #NUMERIC and self.key = #precision then
				true
		else
			if self.refImmediateComposite().type.descriptor = #NUMERIC and self.key = #scale  then
				true
		else
			if self.refImmediateComposite().type.descriptor = #DECIMAL and self.key = #precision then
				true
		else
			if self.refImmediateComposite().type.descriptor = #DECIMAL and self.key = #scale then
				true
		else
			if self.refImmediateComposite().type.descriptor = #FLOAT and self.key = #precision then
				true
		else
			if self.refImmediateComposite().type.descriptor = #TIMEWITHOUTTIMEZONE and self.key = #precision then
				true
		else
			if self.refImmediateComposite().type.descriptor = #TIMEWITHTIMEZONE and self.key = #precision then
				true
		else
			if self.refImmediateComposite().type.descriptor = #TIMESTAMPWITHOUTTIMEZONE and self.key = #precision then
				true
		else
			if self.refImmediateComposite().type.descriptor = #TIMESTAMPWITHTIMEZONE and self.key = #precision then
				true
		else
			if self.refImmediateComposite().type.descriptor = #DAY_SECOND and self.key = #start_leading_precision then
				true
		else
			if self.refImmediateComposite().type.descriptor = #DAY_SECOND and self.key = #second_precision then
				true
		else
			if self.refImmediateComposite().type.descriptor = #YEAR_MONTH and self.key = #start_leading_precision then
				true
		else
				false
		endif
		endif
		endif
		endif
		endif
		endif
		endif
		endif
		endif
		endif
		endif	
		endif
		endif
		endif
		endif
		endif
	else	
			true
	endif;

helper context SQL2003!StringFeature def: targetKey() : ORDB4ORA!CharacterFeatures =
	if self.refImmediateComposite().type.oclIsKindOf(SQL2003!PredefinedType) then
		if self.refImmediateComposite().type.descriptor = #CHARACTER and self.key = #length then
			#size
			else
		if self.refImmediateComposite().type.descriptor = #CHARACTER and self.key = #unit then
			#semantic
		else
			if self.refImmediateComposite().type.descriptor = #CHARACTERVARYING and self.key = #length then
				#size
			else
			if self.refImmediateComposite().type.descriptor = #CHARACTERVARYING and self.key = #unit then
				#semantic
			else
				self.key
			endif
			endif
			endif
		endif		
	else	
			self.key
	endif;

helper context SQL2003!NumericFeature def: targetKey() : ORDB4ORA!NumberFeatures =
	if self.refImmediateComposite().type.oclIsKindOf(SQL2003!PredefinedType) then
			if self.refImmediateComposite().type.descriptor = #NUMERIC and self.key = #precision then
				#precision
		else
			if self.refImmediateComposite().type.descriptor = #NUMERIC and self.key = #scale  then
				#scale
		else
			if self.refImmediateComposite().type.descriptor = #DECIMAL and self.key = #presicion then
				#precision
		else
			if self.refImmediateComposite().type.descriptor = #DECIMAL and self.key = #scale then
				#scale
		else
			if self.refImmediateComposite().type.descriptor = #FLOAT and self.key = #precision then
				#size
		else
				self.key
		endif
		endif
		endif
		endif
		endif
	else	
			self.key
	endif;

helper context SQL2003!DatetimeFeature def: targetKey() : ORDB4ORA!DatetimeFeatures =
	if self.refImmediateComposite().type.oclIsKindOf(SQL2003!PredefinedType) then
			if self.refImmediateComposite().type.descriptor = #TIMEWITHOUTTIMEZONE and self.key = #precision then
				#precision
		else
			if self.refImmediateComposite().type.descriptor = #TIMEWITHTIMEZONE and self.key = #precision then
				#precision
		else
			if self.refImmediateComposite().type.descriptor = #TIMESTAMPWITHOUTTIMEZONE and self.key = #precision then
				#precision
		else
			if self.refImmediateComposite().type.descriptor = #TIMESTAMPWITHTIMEZONE and self.key = #precision then
				#precision
		else
				self.key
		endif
		endif
		endif
		endif
	else	
			self.key
	endif;

helper context SQL2003!IntervalFeature def: targetKey() : ORDB4ORA!IntervalFeatures =
	if self.refImmediateComposite().type.oclIsKindOf(SQL2003!PredefinedType) then
			if self.refImmediateComposite().type.descriptor = #DAY_SECOND and self.key = #start_leading_precision then
				#day_precision
		else
			if self.refImmediateComposite().type.descriptor = #DAY_SECOND and self.key = #second_precision then
				#second_precision
		else
			if self.refImmediateComposite().type.descriptor = #YEAR_MONTH and self.key = #start_leading_precision then
				#year_precision
		else
				self.key
		endif
		endif
		endif
	else	
			self.key
	endif;

helper context SQL2003!Feature def: targetValue() : String = self.value;

helper def : schema : SQL2003!Schema = SQL2003!Schema.allInstances()->asSequence()->first();

helper context SQL2003!DataType def: isBoolean() : Boolean =
	if self.oclIsKindOf(SQL2003!PredefinedType) then
		if self.descriptor = #BOOLEAN then 
			true
		else
			false
		endif
	else
		false
	endif;

helper context SQL2003!DataType def: isHiddenType() : Boolean =
	if self.oclIsKindOf(SQL2003!PredefinedType) then
		if self.descriptor = #BIGINT then
			true
		else
				if self.descriptor = #TIMEWITHTIMEZONE then
					true
				else
						if self.descriptor = #TIMEWITHOUTTIMEZONE  then
							true
						else
							if self.descriptor = #DAY_HOUR  then
							true
						else
							if self.descriptor = #DAY_MINUTE  then
							true
						else
							if self.descriptor = #HOUR_MINUTE  then
							true
						else
							if self.descriptor = #HOUR_SECOND  then
							true
						else
							if self.descriptor = #MINUTE_SECOND  then
							true
						else
							if self.descriptor = #YEAR  then
							true
						else
							if self.descriptor = #DAY  then
							true
						else
							if self.descriptor = #HOUR  then
							true
						else
							if self.descriptor = #MINUTE then
							true
						else
							if self.descriptor = #SECOND  then
							true
						else
							if self.descriptor = #MONTH  then
							true
						else
							false
						endif
						endif
						endif
						endif
						endif
						endif
						endif
						endif
						endif
						endif
						endif
						endif
				endif
		endif		
	else	
			false
	endif;

helper context SQL2003!DataType def: mirrorType() : SQL2003!DataType =
	if self.descriptor = #TIMEWITHTIMEZONE then
			SQL2003!DatetimeType.allInstances()->any(i| i.descriptor = #DATE)
				else
				if self.descriptor = #BIGINT then
					SQL2003!NumericType.allInstances()->any(i| i.descriptor = #NUMERIC)
				else
						if self.descriptor = #TIMEWITHOUTTIMEZONE then
							SQL2003!DatetimeType.allInstances()->any(i| i.descriptor = #DATE)
						else
							if self.descriptor = #DAY_HOUR then
								SQL2003!IntervalType.allInstances()->any(i| i.descriptor = #YEAR)
						else
							if self.descriptor = #DAY_MINUTE then
								SQL2003!IntervalType.allInstances()->any(i| i.descriptor = #YEAR)
						else
							if self.descriptor = #HOUR_MINUTE then
								SQL2003!IntervalType.allInstances()->any(i| i.descriptor = #YEAR)
						else
							if self.descriptor = #HOUR_SECOND then
								SQL2003!IntervalType.allInstances()->any(i| i.descriptor = #YEAR)
						else
							if self.descriptor = #MINUTE_SECOND then
								SQL2003!IntervalType.allInstances()->any(i| i.descriptor = #YEAR)
						else
							if self.descriptor = #YEAR then
								SQL2003!IntervalType.allInstances()->any(i| i.descriptor = #YEAR)
						else
							if self.descriptor = #DAY then
								SQL2003!IntervalType.allInstances()->any(i| i.descriptor = #YEAR)
						else
							if self.descriptor = #HOUR then
								SQL2003!IntervalType.allInstances()->any(i| i.descriptor = #YEAR)
						else
							if self.descriptor = #MINUTE then
								SQL2003!IntervalType.allInstances()->any(i| i.descriptor = #YEAR)
						else
							if self.descriptor = #SECOND then
								SQL2003!IntervalType.allInstances()->any(i| i.descriptor = #YEAR)
						else
							if self.descriptor = #MONTH then
								SQL2003!IntervalType.allInstances()->any(i| i.descriptor = #YEAR)
						else
							self
						endif
						endif
						endif
						endif
						endif
						endif
						endif
						endif
						endif
						endif
						endif
						endif
				endif
	endif;

endpoint rule generateTypes(){
	to 
	dt0: ORDB4ORA!BuiltInCharacterType
	(
 		Descriptor <-#VARCHAR2,
		model <- thisModule.schema
	),
	dt1: ORDB4ORA!BuiltInCharacterType
	(
 		Descriptor <-#NCHAR,
		model <- thisModule.schema
	),
	dt2: ORDB4ORA!BuiltInCharacterType
	(
 		Descriptor <-#NVARCHAR2,
		model <- thisModule.schema
    ),
	dt3: ORDB4ORA!BuiltInNumberType
	(
 		Descriptor <-#NUMBER,
		model <- thisModule.schema
	),
	dt99: ORDB4ORA!BuiltInNumberType
	(
 		Descriptor <-#BINARY_FLOAT,
		model <- thisModule.schema
	),
	d98: ORDB4ORA!BuiltInNumberType
	(
 		Descriptor <-#BINARY_DOUBLE,
		model <- thisModule.schema
	),
	dt4: ORDB4ORA!LongAndRawType
	(
 		Descriptor <-#LONG,
		model <- thisModule.schema
	),
	dt5: ORDB4ORA!LongAndRawType
	(
 		Descriptor <-#LONGRAW,
		model <- thisModule.schema
	),
	dt97: ORDB4ORA!LongAndRawType
	(
 		Descriptor <-#RAW,
		model <- thisModule.schema
	),
	dt96: ORDB4ORA!DatetimeType
	(
 		Descriptor <-#TIMESTAMPWITHLOCALTIMEZONE,
		model <- thisModule.schema
	),
	dt7: ORDB4ORA!ROWIDType
	(
 		Descriptor <-#ROWID,
		model <- thisModule.schema
	),
	dt8: ORDB4ORA!ROWIDType
	(
 		Descriptor <-#UROWID,
		model <- thisModule.schema
	),
	dt9: ORDB4ORA!ANSICharacterType
	(
 		Descriptor <-#CHARVARYING,
		model <- thisModule.schema
	),
		dt80: ORDB4ORA!ANSICharacterType
	(
 		Descriptor <-#NCHARVARYING,
		model <- thisModule.schema
	),
	dt70: ORDB4ORA!ANSICharacterType
	(
 		Descriptor <-#VARCHAR,
		model <- thisModule.schema
	),
	dt11: ORDB4ORA!ANSICharacterType
	(
 		Descriptor <-#NATIONALCHARACTERVARYING,
		model <- thisModule.schema
	),
	dt12: ORDB4ORA!ANSICharacterType
	(
 		Descriptor <-#NATIONALCHARVARYING,
		model <- thisModule.schema
	),
	dt13: ORDB4ORA!ANSICharacterType
	(
 		Descriptor <-#NATIONALCHARACTER,
		model <- thisModule.schema
	),
	dt14: ORDB4ORA!ANSICharacterType
	(
 		Descriptor <-#NATIONALCHAR,
		model <- thisModule.schema
	),
	dt15: ORDB4ORA!ANSINumberType
	(
 		Descriptor <-#DEC,
		model <- thisModule.schema
	),
	dt16: ORDB4ORA!ANSINumberType
	(
 		Descriptor <-#INT,
		model <- thisModule.schema
	),
	dt17: ORDB4ORA!AnyType
	(
 		Descriptor <-#SYSANYDATA,
		model <- thisModule.schema
	),
	dt19: ORDB4ORA!AnyType
	(
 		Descriptor <-#SYSANYDATASET,
		model <- thisModule.schema
	),
	dt20: ORDB4ORA!MediaType
	(
 		Descriptor <-#ORDAudio,
		model <- thisModule.schema
	),
	dt21: ORDB4ORA!MediaType
	(
 		Descriptor <-#ORDImage,
		model <- thisModule.schema
	),
	dt22: ORDB4ORA!MediaType
	(
 		Descriptor <-#ORDDoc,
		model <- thisModule.schema
	),
	dt23: ORDB4ORA!MediaType
	(
 		Descriptor <-#ORDVideo,
		model <- thisModule.schema
	),
	dt66: ORDB4ORA!MediaType
	(
 		Descriptor <-#ORDImageSignature,
		model <- thisModule.schema
	),
	dt65: ORDB4ORA!MediaType
	(
 		Descriptor <-#SI_STILLIMAGE,
		model <- thisModule.schema
	),
	dt64: ORDB4ORA!MediaType
	(
 		Descriptor <-#SI_AVERAGECOLOR,
		model <- thisModule.schema
	),
	dt63: ORDB4ORA!MediaType
	(
 		Descriptor <-#SI_POSITIONALCOLOR,
		model <- thisModule.schema
	),
	dt62: ORDB4ORA!MediaType
	(
 		Descriptor <-#SI_COLORHISTOGRAM,
		model <- thisModule.schema
	),
	dt61: ORDB4ORA!MediaType
	(
 		Descriptor <-#SI_TEXTURE,
		model <- thisModule.schema
	),
	dt60: ORDB4ORA!MediaType
	(
 		Descriptor <-#SI_FEATURELIST,
		model <- thisModule.schema
	),
	dt55: ORDB4ORA!MediaType
	(
 		Descriptor <-#SI_COLOR,
		model <- thisModule.schema
	),
	dt24: ORDB4ORA!XMLType
	(
 		Descriptor <-#URITYPE,
		model <- thisModule.schema
	),
	dt41: ORDB4ORA!SpacialType
	(
 		Descriptor <-#SDO_GEOMETRY,
		model <- thisModule.schema
	),
	dt42: ORDB4ORA!SpacialType
	(
 		Descriptor <-#SDO_TOPO_GEOMETRY,
		model <- thisModule.schema
	),
	dt43: ORDB4ORA!SpacialType
	(
 		Descriptor <-#SDO_RASTER,
		model <- thisModule.schema
	),
	dt27: ORDB4ORA!LOBType
	(
 		Descriptor <-#BFILE,
		model <- thisModule.schema
	),
	dt28: ORDB4ORA!LOBType
	(
 		Descriptor <-#NLOB,
		model <- thisModule.schema
	)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'generateTypes(){',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementTarget_dt0 : iTrace!TargetElement (
			type <- dt0.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt1 : iTrace!TargetElement (
			type <- dt1.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt2 : iTrace!TargetElement (
			type <- dt2.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt3 : iTrace!TargetElement (
			type <- dt3.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt99 : iTrace!TargetElement (
			type <- dt99.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_d98 : iTrace!TargetElement (
			type <- d98.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt4 : iTrace!TargetElement (
			type <- dt4.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt5 : iTrace!TargetElement (
			type <- dt5.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt97 : iTrace!TargetElement (
			type <- dt97.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt96 : iTrace!TargetElement (
			type <- dt96.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt7 : iTrace!TargetElement (
			type <- dt7.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt8 : iTrace!TargetElement (
			type <- dt8.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt9 : iTrace!TargetElement (
			type <- dt9.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt80 : iTrace!TargetElement (
			type <- dt80.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt70 : iTrace!TargetElement (
			type <- dt70.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt11 : iTrace!TargetElement (
			type <- dt11.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt12 : iTrace!TargetElement (
			type <- dt12.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt13 : iTrace!TargetElement (
			type <- dt13.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt14 : iTrace!TargetElement (
			type <- dt14.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt15 : iTrace!TargetElement (
			type <- dt15.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt16 : iTrace!TargetElement (
			type <- dt16.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt17 : iTrace!TargetElement (
			type <- dt17.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt19 : iTrace!TargetElement (
			type <- dt19.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt20 : iTrace!TargetElement (
			type <- dt20.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt21 : iTrace!TargetElement (
			type <- dt21.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt22 : iTrace!TargetElement (
			type <- dt22.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt23 : iTrace!TargetElement (
			type <- dt23.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt66 : iTrace!TargetElement (
			type <- dt66.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt65 : iTrace!TargetElement (
			type <- dt65.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt64 : iTrace!TargetElement (
			type <- dt64.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt63 : iTrace!TargetElement (
			type <- dt63.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt62 : iTrace!TargetElement (
			type <- dt62.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt61 : iTrace!TargetElement (
			type <- dt61.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt60 : iTrace!TargetElement (
			type <- dt60.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt55 : iTrace!TargetElement (
			type <- dt55.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt24 : iTrace!TargetElement (
			type <- dt24.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt41 : iTrace!TargetElement (
			type <- dt41.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt42 : iTrace!TargetElement (
			type <- dt42.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt43 : iTrace!TargetElement (
			type <- dt43.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt27 : iTrace!TargetElement (
			type <- dt27.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_dt28 : iTrace!TargetElement (
			type <- dt28.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementTarget_dt0.refSetValue('object', dt0);
		elementTarget_dt1.refSetValue('object', dt1);
		elementTarget_dt2.refSetValue('object', dt2);
		elementTarget_dt3.refSetValue('object', dt3);
		elementTarget_dt99.refSetValue('object', dt99);
		elementTarget_d98.refSetValue('object', d98);
		elementTarget_dt4.refSetValue('object', dt4);
		elementTarget_dt5.refSetValue('object', dt5);
		elementTarget_dt97.refSetValue('object', dt97);
		elementTarget_dt96.refSetValue('object', dt96);
		elementTarget_dt7.refSetValue('object', dt7);
		elementTarget_dt8.refSetValue('object', dt8);
		elementTarget_dt9.refSetValue('object', dt9);
		elementTarget_dt80.refSetValue('object', dt80);
		elementTarget_dt70.refSetValue('object', dt70);
		elementTarget_dt11.refSetValue('object', dt11);
		elementTarget_dt12.refSetValue('object', dt12);
		elementTarget_dt13.refSetValue('object', dt13);
		elementTarget_dt14.refSetValue('object', dt14);
		elementTarget_dt15.refSetValue('object', dt15);
		elementTarget_dt16.refSetValue('object', dt16);
		elementTarget_dt17.refSetValue('object', dt17);
		elementTarget_dt19.refSetValue('object', dt19);
		elementTarget_dt20.refSetValue('object', dt20);
		elementTarget_dt21.refSetValue('object', dt21);
		elementTarget_dt22.refSetValue('object', dt22);
		elementTarget_dt23.refSetValue('object', dt23);
		elementTarget_dt66.refSetValue('object', dt66);
		elementTarget_dt65.refSetValue('object', dt65);
		elementTarget_dt64.refSetValue('object', dt64);
		elementTarget_dt63.refSetValue('object', dt63);
		elementTarget_dt62.refSetValue('object', dt62);
		elementTarget_dt61.refSetValue('object', dt61);
		elementTarget_dt60.refSetValue('object', dt60);
		elementTarget_dt55.refSetValue('object', dt55);
		elementTarget_dt24.refSetValue('object', dt24);
		elementTarget_dt41.refSetValue('object', dt41);
		elementTarget_dt42.refSetValue('object', dt42);
		elementTarget_dt43.refSetValue('object', dt43);
		elementTarget_dt27.refSetValue('object', dt27);
		elementTarget_dt28.refSetValue('object', dt28);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule DatetimeType2Date {
	from
		dt : SQL2003!DatetimeType(dt.descriptor=#DATE)
	to
		date : ORDB4ORA!DatetimeType (
			Descriptor <- #DATE,
			model <- thisModule.schema
		)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'DatetimeType2Date',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_dt : iTrace!SourceElement (
			type <- dt.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_date : iTrace!TargetElement (
			type <- date.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_dt.refSetValue('object', dt);
		elementTarget_date.refSetValue('object', date);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule NumericType2Numeric {
	from
		dt : SQL2003!NumericType(dt.descriptor = #NUMERIC)
	to
		numeric : ORDB4ORA!ANSINumberType (
			Descriptor <-#NUMERIC,
			model <- thisModule.schema
		)	


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'NumericType2Numeric',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_dt : iTrace!SourceElement (
			type <- dt.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_numeric : iTrace!TargetElement (
			type <- numeric.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_dt.refSetValue('object', dt);
		elementTarget_numeric.refSetValue('object', numeric);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule CharacterStringType2Varchar {
	from
		cs : SQL2003!CharacterStringType(cs.descriptor = #CHARACTER)
	to
		ch1 : ORDB4ORA!ANSICharacterType (
			
			
			Descriptor <- #CHARACTER,
			model <- thisModule.schema
		)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'CharacterStringType2Varchar',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_cs : iTrace!SourceElement (
			type <- cs.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_ch1 : iTrace!TargetElement (
			type <- ch1.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_cs.refSetValue('object', cs);
		elementTarget_ch1.refSetValue('object', ch1);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule CharacterStringType2Charvarying {
	from
		cs : SQL2003!CharacterStringType(cs.descriptor = #CHARACTERVARYING)
	to
		ch2 : ORDB4ORA!ANSICharacterType (
			
			Descriptor <- #CHARACTERVARYING,
			model <- thisModule.schema
		)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'CharacterStringType2Charvarying',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_cs : iTrace!SourceElement (
			type <- cs.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_ch2 : iTrace!TargetElement (
			type <- ch2.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_cs.refSetValue('object', cs);
		elementTarget_ch2.refSetValue('object', ch2);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule BooleanType2Boolean {
	from
		b : SQL2003!BooleanType(b.descriptor = #BOOLEAN)
	to
		ch3 : ORDB4ORA!BuiltInCharacterType (
			Descriptor <- #CHAR,
			model <- thisModule.schema
		)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'BooleanType2Boolean',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_b : iTrace!SourceElement (
			type <- b.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_ch3 : iTrace!TargetElement (
			type <- ch3.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_b.refSetValue('object', b);
		elementTarget_ch3.refSetValue('object', ch3);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule DatetimeType2TimestampWTZ{
	from
		dt : SQL2003!DatetimeType(dt.descriptor = #TIMESTAMPWITHTIMEZONE)
	to
		tmp1 : ORDB4ORA!DatetimeType (
			Descriptor <- #TIMESTAMPWITHTIMEZONE,
			model <- thisModule.schema
		)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'DatetimeType2TimestampWTZ{',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_dt : iTrace!SourceElement (
			type <- dt.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_tmp1 : iTrace!TargetElement (
			type <- tmp1.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_dt.refSetValue('object', dt);
		elementTarget_tmp1.refSetValue('object', tmp1);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule DatetimeType2TimestampWOTZ {
	from
		dt : SQL2003!DatetimeType(dt.descriptor = #TIMESTAMPWITHOUTTIMEZONE)
	to
		tmp2 : ORDB4ORA!DatetimeType (
			Descriptor <- #TIMESTAMP,
			model <- thisModule.schema
		)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'DatetimeType2TimestampWOTZ',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_dt : iTrace!SourceElement (
			type <- dt.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_tmp2 : iTrace!TargetElement (
			type <- tmp2.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_dt.refSetValue('object', dt);
		elementTarget_tmp2.refSetValue('object', tmp2);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule XMLType2XMLType {
	from
		x : SQL2003!XMLType(x.descriptor = #XMLTYPE)
	to
		xml : ORDB4ORA!XMLType (
			Descriptor <- #XMLTYPE,
			model <- thisModule.schema
		)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'XMLType2XMLType',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_x : iTrace!SourceElement (
			type <- x.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_xml : iTrace!TargetElement (
			type <- xml.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_x.refSetValue('object', x);
		elementTarget_xml.refSetValue('object', xml);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule BinaryStringType2LOB {
	from
		bin : SQL2003!BinaryStringType
	to
		bnr : ORDB4ORA!LOBType (
			Descriptor <- #BLOB,
			model <- thisModule.schema
		)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'BinaryStringType2LOB',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_bin : iTrace!SourceElement (
			type <- bin.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_bnr : iTrace!TargetElement (
			type <- bnr.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_bin.refSetValue('object', bin);
		elementTarget_bnr.refSetValue('object', bnr);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule CharacterStringType2CLOB {
	from
		cs : SQL2003!CharacterStringType(cs.descriptor = #CHARACTERLARGEOBJECT)
	to
		char4 : ORDB4ORA!LOBType (
			
			Descriptor <- #CLOB,
			model <- thisModule.schema
		)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'CharacterStringType2CLOB',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_cs : iTrace!SourceElement (
			type <- cs.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_char4 : iTrace!TargetElement (
			type <- char4.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_cs.refSetValue('object', cs);
		elementTarget_char4.refSetValue('object', char4);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule NumericType2Decimal {
	from
		n : SQL2003!NumericType(n.descriptor = #DECIMAL)
	to
		num1 : ORDB4ORA!ANSINumberType (
			Descriptor <-#DECIMAL,
			model <- thisModule.schema
			)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'NumericType2Decimal',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_n : iTrace!SourceElement (
			type <- n.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_num1 : iTrace!TargetElement (
			type <- num1.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_n.refSetValue('object', n);
		elementTarget_num1.refSetValue('object', num1);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule NumericType2Small {
	from
		n : SQL2003!NumericType(n.descriptor = #SMALLINT)
	to
		out : ORDB4ORA!ANSINumberType (
			Descriptor <-#SMALLINT,
			model <- thisModule.schema
			)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'NumericType2Small',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_n : iTrace!SourceElement (
			type <- n.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_out : iTrace!TargetElement (
			type <- out.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_n.refSetValue('object', n);
		elementTarget_out.refSetValue('object', out);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule NumericType2Integer {
	from
		n : SQL2003!NumericType(n.descriptor = #INTEGER)
	to
		out : ORDB4ORA!ANSINumberType (
			Descriptor <-#INTEGER,
			model <- thisModule.schema
			)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'NumericType2Integer',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_n : iTrace!SourceElement (
			type <- n.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_out : iTrace!TargetElement (
			type <- out.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_n.refSetValue('object', n);
		elementTarget_out.refSetValue('object', out);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule NumericType2Float {
	from
		n : SQL2003!NumericType(n.descriptor = #FLOAT)
	to
		out : ORDB4ORA!ANSINumberType (
			Descriptor <-#FLOAT,
			model <- thisModule.schema
			)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'NumericType2Float',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_n : iTrace!SourceElement (
			type <- n.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_out : iTrace!TargetElement (
			type <- out.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_n.refSetValue('object', n);
		elementTarget_out.refSetValue('object', out);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule NumericType2Real {
	from
		n : SQL2003!NumericType(n.descriptor = #REAL)
	to
		out : ORDB4ORA!ANSINumberType (
			Descriptor <-#REAL,
			model <- thisModule.schema
			)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'NumericType2Real',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_n : iTrace!SourceElement (
			type <- n.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_out : iTrace!TargetElement (
			type <- out.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_n.refSetValue('object', n);
		elementTarget_out.refSetValue('object', out);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule NumericType2Double {
	from
		n : SQL2003!NumericType(n.descriptor = #DOUBLEPRECISION)
	to
		out : ORDB4ORA!ANSINumberType (
			Descriptor <-#DOUBLEPRECISION,
			model <- thisModule.schema
			)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'NumericType2Double',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_n : iTrace!SourceElement (
			type <- n.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_out : iTrace!TargetElement (
			type <- out.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_n.refSetValue('object', n);
		elementTarget_out.refSetValue('object', out);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule IntervalYear2Interval {
	from
		n : SQL2003!IntervalType(n.descriptor = #YEAR_MONTH)
	to
		out : ORDB4ORA!DatetimeType (
			Descriptor <-#INTERVALYEARTOMONTH,
			model <- thisModule.schema
			)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'IntervalYear2Interval',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_n : iTrace!SourceElement (
			type <- n.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_out : iTrace!TargetElement (
			type <- out.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_n.refSetValue('object', n);
		elementTarget_out.refSetValue('object', out);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule IntervalDay2Interval {
	from
		n : SQL2003!IntervalType(n.descriptor = #DAY_SECOND)
	to
		out : ORDB4ORA!DatetimeType (
			Descriptor <-#INTERVALDAYTOSECOND,
			model <- thisModule.schema
			)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'IntervalDay2Interval',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_n : iTrace!SourceElement (
			type <- n.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_out : iTrace!TargetElement (
			type <- out.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_n.refSetValue('object', n);
		elementTarget_out.refSetValue('object', out);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule IntervalYear2AnyType {
	from
		n : SQL2003!IntervalType(n.descriptor = #YEAR)
	to
		out : ORDB4ORA!AnyType (
			Descriptor <-#SYSANYTYPE,
			model <- thisModule.schema
			)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'IntervalYear2AnyType',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_n : iTrace!SourceElement (
			type <- n.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_out : iTrace!TargetElement (
			type <- out.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_n.refSetValue('object', n);
		elementTarget_out.refSetValue('object', out);
	}
}

-- ____________________ End Added by iTrace  _________________________


------------------------------------------------------------------------------
--		TRANSFORMACION DE ELEMENTOS
------------------------------------------------------------------------------
------  RAIZ -------------- -------------------------------------------------
-- se crea el elemento raiz
rule Schema2Model {
	from
		s :SQL2003!Schema
	to
		m : ORDB4ORA!Model(
			Name <- s.name
		)
	


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'Schema2Model',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_s : iTrace!SourceElement (
			type <- s.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_m : iTrace!TargetElement (
			type <- m.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_s.refSetValue('object', s);
		elementTarget_m.refSetValue('object', m);
	}
}

-- ____________________ End Added by iTrace  _________________________


------  RESTRICCIONES -------------------------------------------------
-- La regla transforma una restriccion Primary Key de SQL2003 a ORDB4ORA
rule PK2PK {
	from
		pk : SQL2003!PrimaryKey
	to
		out : ORDB4ORA!PrimaryKey (
			
			Name <- pk.name,
			attributes <-pk.columns
		)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'PK2PK',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_pk : iTrace!SourceElement (
			type <- pk.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_out : iTrace!TargetElement (
			type <- out.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_pk.refSetValue('object', pk);
		elementTarget_out.refSetValue('object', out);
	}
}

-- ____________________ End Added by iTrace  _________________________


-- La regla transforma una restriccion CHECK de SQL2003 a ORDB4ORA
rule TableCheckConstraint2Check {
	from
		ch : SQL2003!TableCheckConstraint
	to
		out : ORDB4ORA!Check (
			Name <- ch.name,
			Condition <- ch.expression,
			attributes <-ch.columns
		)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'TableCheckConstraint2Check',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_ch : iTrace!SourceElement (
			type <- ch.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_out : iTrace!TargetElement (
			type <- out.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_ch.refSetValue('object', ch);
		elementTarget_out.refSetValue('object', out);
	}
}

-- ____________________ End Added by iTrace  _________________________


-- La regla transforma una restriccion UNIQUE de SQL2003 a ORDB4ORA
rule Unique2Unique {
	from
		u : SQL2003!UniqueConstraint(u.oclIsTypeOf(SQL2003!UniqueConstraint))
	to
		out : ORDB4ORA!Unique (
			Name <-u.name,
			attributes <-u.columns
			)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'Unique2Unique',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_u : iTrace!SourceElement (
			type <- u.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_out : iTrace!TargetElement (
			type <- out.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_u.refSetValue('object', u);
		elementTarget_out.refSetValue('object', out);
	}
}

-- ____________________ End Added by iTrace  _________________________


-- La regla transforma una restriccion NotNull de SQL2003 a ORDB4ORA
--- SQL2003 no posee el atributo nombre
rule NotNull2NotNull {
	from
		ch : SQL2003!NotNull
	to
		out : ORDB4ORA!NotNull (
			Name <- '<...>',
			attributes <-ch.columns
		)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'NotNull2NotNull',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_ch : iTrace!SourceElement (
			type <- ch.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_out : iTrace!TargetElement (
			type <- out.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_ch.refSetValue('object', ch);
		elementTarget_out.refSetValue('object', out);
	}
}

-- ____________________ End Added by iTrace  _________________________


-- la regla transforma una restriccion de tipo Referential Constraint de SQL2003 a ForeignKey de ORDB4ORA
--- Perdida de Informacion: no se traslada los atributos update_action y match. El atributo delete_action tiene cuatro valores posibles. En el destino se pierden tres valores.
--- Observaciones: la restricción referencia a una restriccion de tipo UNIQUE. En ORDB4ORA las restriccion referencia directamente a una tabla
rule ReferentialConstraint2ForeignKey {
	from 
		rc : SQL2003!ReferentialConstraint
	to
		fk : ORDB4ORA!ForeignKey(
		Name <- rc.name,
		OnDelete <- if rc.delete_action = #CASCADE then #CASCADE else if rc.delete_action = #SET_NULL then #SETNULL else OclUndefined endif endif, 
		reference <- rc.references.table,
		attributes <- rc.columns.union(rc.references.columns),
		table <- rc.table
		)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'ReferentialConstraint2ForeignKey',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_rc : iTrace!SourceElement (
			type <- rc.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_fk : iTrace!TargetElement (
			type <- fk.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_rc.refSetValue('object', rc);
		elementTarget_fk.refSetValue('object', fk);
	}
}

-- ____________________ End Added by iTrace  _________________________


------------------------------------------------------------------------------
--		UDT
------------------------------------------------------------------------------
-- La regla transforma un Tipo Estructurado de SQL2003 a ORDB4ORA
-- se crean los métodos, atributos y las tablas tipadas correspondientes
-- Perdida de información
rule StructuredType2StructuredType{
	from
		st : SQL2003!StructuredType
	to
		out : ORDB4ORA!StructuredType (
			Name <-st.name,
			typed<- st.typed,
            method <- st.methods,
			attribute <- st.attributes,
			supertype <- if(not st.super_type.oclIsUndefined())
									then
											st.super_type
									else
										OclUndefined
									endif,
			is_instantiable <- st.is_instantiable,
			is_final <- st.is_final,
			model <-thisModule.schema
			)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'StructuredType2StructuredType{',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_st : iTrace!SourceElement (
			type <- st.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_out : iTrace!TargetElement (
			type <- out.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_st.refSetValue('object', st);
		elementTarget_out.refSetValue('object', out);
	}
}

-- ____________________ End Added by iTrace  _________________________


--La regla transforma una tabla tipada de SQ2003 a ORDB4ORA
-- Perdida de información
--- supertable
--- subtable
rule Typed2Typed {
	from
		tt : SQL2003!TypedTable
	to
		ta : ORDB4ORA!TypedTable (
			Name <-tt.name,
			columns <- tt.columns,
			restriction <- tt.restrictions,
			structured <- tt.structured,
			triggers <- tt.triggers,
			views <- tt.views,
			model <-thisModule.schema
		)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'Typed2Typed',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_tt : iTrace!SourceElement (
			type <- tt.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_ta : iTrace!TargetElement (
			type <- ta.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_tt.refSetValue('object', tt);
		elementTarget_ta.refSetValue('object', ta);
	}
}

-- ____________________ End Added by iTrace  _________________________


--La regla transforma una DerivedTable de SQ2003 a ORDB4ORA
rule Derived2Derived {
	from
		dtIN : SQL2003!DerivedTable(dtIN.oclIsTypeOf(SQL2003!DerivedTable))
	to
		dtOUT : ORDB4ORA!DerivedTable (
			Name <-dtIN.name,
			columns <- dtIN.columns,
			query_expression <- dtIN.query_expression,
			triggers<-dtIN.triggers,
			restriction <- dtIN.restrictions,
			views <- dtIN.views,
			model <- thisModule.schema
		)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'Derived2Derived',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_dtIN : iTrace!SourceElement (
			type <- dtIN.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_dtOUT : iTrace!TargetElement (
			type <- dtOUT.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_dtIN.refSetValue('object', dtIN);
		elementTarget_dtOUT.refSetValue('object', dtOUT);
	}
}

-- ____________________ End Added by iTrace  _________________________


--La regla transforma una View de SQ2003 a ORDB4ORA
rule View2View {
	from
		dtIN : SQL2003!View
	to
		dtOUT :ORDB4ORA!View (
			Name <-dtIN.name,
			columns <- dtIN.columns,
			query_expression <- dtIN.query_expression,
			triggers<-dtIN.triggers,
			restriction <- dtIN.restrictions,
			tables <-dtIN.tables,
			components <- dtIN.components,
			model <- thisModule.schema
		)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'View2View',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_dtIN : iTrace!SourceElement (
			type <- dtIN.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_dtOUT : iTrace!TargetElement (
			type <- dtOUT.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_dtIN.refSetValue('object', dtIN);
		elementTarget_dtOUT.refSetValue('object', dtOUT);
	}
}

-- ____________________ End Added by iTrace  _________________________


-- La regla transforma un Tipo ROW de SQL2003 a un Tipo Estructurado de ORDB4ORA
rule ROW2StructuredType {
	from
		row : SQL2003!ROW
	to
		out : ORDB4ORA!StructuredType (
			Name <-row.name,
			attribute <- row.fields,
			supertype <- if(not row.oclIsUndefined())
									then
										row.super_type
									else
										OclUndefined
									endif,
			model <-thisModule.schema
			)



-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'ROW2StructuredType',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_row : iTrace!SourceElement (
			type <- row.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_out : iTrace!TargetElement (
			type <- out.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_row.refSetValue('object', row);
		elementTarget_out.refSetValue('object', out);
	}
}

-- ____________________ End Added by iTrace  _________________________


-- La regla transforma un Tipo Method de SQL2003 a un Tipo Method de ORDB4ORA
--- observaciones: el metamodelo de SQL2003 no tiene parametros asociados al método ni tipo retornado
rule Method2Method {
	from
		mIN : SQL2003!Method
	to
		mOut : ORDB4ORA!Method (
			Name <-mIN.name,
			override <-mIN.override,
			returnType <- if(mIN.oclIsUndefined()) then
							OclUndefined
							else
								if mIN.return_type.isHiddenType() 
								then 
									mIN.return_type.mirrorType() else 
								mIN.return_type endif
							endif,
			parameters<-mIN.parameters	
		)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'Method2Method',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_mIN : iTrace!SourceElement (
			type <- mIN.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_mOut : iTrace!TargetElement (
			type <- mOut.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_mIN.refSetValue('object', mIN);
		elementTarget_mOut.refSetValue('object', mOut);
	}
}

-- ____________________ End Added by iTrace  _________________________


-- La regla transforma un Parametro de Método de SQL2003 a ORDB4ORA
rule Parameter2Parameter{
	from
		pIN : SQL2003!MethodParameter
	to
		pOUT : ORDB4ORA!MethodParameter
		(
			Name <- pIN.name,
			Type <- if pIN.type.isHiddenType() then pIN.type.mirrorType() else pIN.type endif
		)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'Parameter2Parameter{',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_pIN : iTrace!SourceElement (
			type <- pIN.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_pOUT : iTrace!TargetElement (
			type <- pOUT.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_pIN.refSetValue('object', pIN);
		elementTarget_pOUT.refSetValue('object', pOUT);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule Parameter2Parameter2{
	from
		pIN : SQL2003!ParameterWithMode
	to
		pOUT : ORDB4ORA!OperationParameter
		(
			Name <- pIN.name,
			Type <-  if pIN.type.isHiddenType() then pIN.type.mirrorType() else pIN.type endif,
			Mode <- pIN.mode
		)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'Parameter2Parameter2{',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_pIN : iTrace!SourceElement (
			type <- pIN.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_pOUT : iTrace!TargetElement (
			type <- pOUT.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_pIN.refSetValue('object', pIN);
		elementTarget_pOUT.refSetValue('object', pOUT);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule Trigger2Trigger {
	from
		tIN: SQL2003!Trigger
	to
		tOUT:ORDB4ORA!Trigger(
		Name <- tIN.name,
		Event <- tIN.event,
		Action <- tIN.actionTime,
		updateColumns <- tIN.updateColumns,
		table <- tIN.table,
		Body <- tIN.triggeredAction
		)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'Trigger2Trigger',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_tIN : iTrace!SourceElement (
			type <- tIN.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_tOUT : iTrace!TargetElement (
			type <- tOUT.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_tIN.refSetValue('object', tIN);
		elementTarget_tOUT.refSetValue('object', tOUT);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule Procedure2Procedure {
	from
		pIN: SQL2003!Procedure
	to
		pOUT: ORDB4ORA!Procedure
		(
			Name <- pIN.name,
			Body <- pIN.body,
			operationParameters <- pIN.parametersWithMode,
			model <- thisModule.schema
		)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'Procedure2Procedure',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_pIN : iTrace!SourceElement (
			type <- pIN.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_pOUT : iTrace!TargetElement (
			type <- pOUT.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_pIN.refSetValue('object', pIN);
		elementTarget_pOUT.refSetValue('object', pOUT);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule Function2Function {
	from
		pIN: SQL2003!Function
	to
		pOUT: ORDB4ORA!Function
		(
			Name <- pIN.name,
			Body <- pIN.body,
			operationParameters <- pIN.parametersWithMode,
			Return <- pIN.return_type,
			model <- thisModule.schema
		)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'Function2Function',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_pIN : iTrace!SourceElement (
			type <- pIN.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_pOUT : iTrace!TargetElement (
			type <- pOUT.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_pIN.refSetValue('object', pIN);
		elementTarget_pOUT.refSetValue('object', pOUT);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule ReferenceType2ReferenceType {
	from
		r : SQL2003!ReferenceType
	to  
		out : ORDB4ORA!ReferenceType(
			Name <-r.name,
			Type <-r.type,
			model <- thisModule.schema
			)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'ReferenceType2ReferenceType',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_r : iTrace!SourceElement (
			type <- r.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_out : iTrace!TargetElement (
			type <- out.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_r.refSetValue('object', r);
		elementTarget_out.refSetValue('object', out);
	}
}

-- ____________________ End Added by iTrace  _________________________


-- La regla transforma un ARRAY de SQL2003 a un Tipo VARRAY de ORDB4ORA
--- Perdida de información
--- supertype
rule ARRAY2Varray {
	from
		a : SQL2003!ARRAY
	to
		out : ORDB4ORA!Varray (
			Name <-'VARRAY_'+a.name.regexReplaceAll('ARRAY_',''),
			NumElements <-a.num_elements,
			Type <-  if a.type.isHiddenType() then a.type.mirrorType() else a.type endif,
			model <- thisModule.schema
			)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'ARRAY2Varray',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_a : iTrace!SourceElement (
			type <- a.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_out : iTrace!TargetElement (
			type <- out.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_a.refSetValue('object', a);
		elementTarget_out.refSetValue('object', out);
	}
}

-- ____________________ End Added by iTrace  _________________________


-- La regla transforma un MULTISET de SQL2003 a un Tipo NestedTable de ORDB4ORA
-- Perdida de información
--- supertype (ORDB4ORA no lo soporta)
rule MULTISET2NestedTable {
	from
		mul : SQL2003!MULTISET
	to
		out : ORDB4ORA!NestedTableType (
			Name <-'NT_'+mul.name.regexReplaceAll('MULTISET_',''),
			Type <- if mul.type.isHiddenType() then mul.type.mirrorType() else mul.type endif,
			model <- thisModule.schema
			)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'MULTISET2NestedTable',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_mul : iTrace!SourceElement (
			type <- mul.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_out : iTrace!TargetElement (
			type <- out.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_mul.refSetValue('object', mul);
		elementTarget_out.refSetValue('object', out);
	}
}

-- ____________________ End Added by iTrace  _________________________


-- La regla transforma un Attribute de SQL2003 a un Attribute de ORDB4ORA
-- Si el tipo origen es Boolean, el atributo size tomará siempre el valor 1
-- Si el tipo origen es Boolean se crea un elemento CHECK
-- Perdida de información
--- default  (ORDB4ORA no lo soporta)
rule Attribute2Attribute {
	from
		attIN : SQL2003!Attribute(not attIN.type.oclIsTypeOf(SQL2003!MULTISET))
	to
		attOUT : ORDB4ORA!Attribute (
			Name <- attIN.name,
			Type <- if attIN.type.isHiddenType() then attIN.type.mirrorType() else attIN.type endif,
			structured <- attIN.structured,
			features <- attIN.features->select(f|f.haveLegalTarget())->collect(f|thisModule.Feature2Feature(f))
			)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'Attribute2Attribute',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_attIN : iTrace!SourceElement (
			type <- attIN.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_attOUT : iTrace!TargetElement (
			type <- attOUT.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_attIN.refSetValue('object', attIN);
		elementTarget_attOUT.refSetValue('object', attOUT);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule Attribute2AttributeNT {
	from
		attIN : SQL2003!Attribute(attIN.type.oclIsTypeOf(SQL2003!MULTISET))
	to
		attOUT : ORDB4ORA!Attribute (
			Name <- attIN.name,
			Type <- if attIN.type.isHiddenType() then attIN.type.mirrorType() else attIN.type endif,
			structured <- attIN.structured,
			features <- attIN.features->select(f|f.haveLegalTarget())->collect(f|thisModule.Feature2Feature(f))
			),
		SNT_out : ORDB4ORA!StoredNestedTable(
			Name<-attIN.type.name+'_Table',
			attribute<-attIN,
			typed<-SQL2003!TypedTable.allInstances()->select(tt|tt.structured.equals(attIN.structured))->first()
			)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'Attribute2AttributeNT',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_attIN : iTrace!SourceElement (
			type <- attIN.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_attOUT : iTrace!TargetElement (
			type <- attOUT.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_SNT_out : iTrace!TargetElement (
			type <- SNT_out.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_attIN.refSetValue('object', attIN);
		elementTarget_attOUT.refSetValue('object', attOUT);
		elementTarget_SNT_out.refSetValue('object', SNT_out);
	}
}

-- ____________________ End Added by iTrace  _________________________


-- Si el tipo origen es Boolean, el atributo size tomará siempre el valor 1
rule Field2Attribute {
	from
		field : SQL2003!Field
	to
		att : ORDB4ORA!Attribute (
			Name <- field.name,
			Type <- if field.type.isHiddenType() then field.type.mirrorType() else field.type endif,
			structured<- field.row,
			features <- field.features->select(f|f.haveLegalTarget())->collect(f|thisModule.Feature2Feature(f))
			)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'Field2Attribute',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_field : iTrace!SourceElement (
			type <- field.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_att : iTrace!TargetElement (
			type <- att.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_field.refSetValue('object', field);
		elementTarget_att.refSetValue('object', att);
	}
}

-- ____________________ End Added by iTrace  _________________________


-- La regla transforma un Column de SQL2003 a un Column de ORDB4ORA
-- Si el tipo origen es Boolean, el atributo size tomará siempre el valor 1
-- Si el tipo origen es Boolean se crea un elemento CHECK
-- Perdida de información
--- default  (ORDB4ORA no lo soporta)
rule ColumnBoolean2Column {
	from
		col : SQL2003!Column(col.type.isBoolean() and not col.refImmediateComposite().oclIsTypeOf(SQL2003!DerivedTable))
	to
		att : ORDB4ORA!Column (
			Name <- col.name,
			Type <- if col.type.isHiddenType() then col.type.mirrorType() else col.type endif,
			restrictions <-col.restrictions->append(ch),
			features <- col.features->select(f|f.haveLegalTarget())->collect(f|thisModule.Feature2Feature(f))
			),
		ch : ORDB4ORA!Check (
			Name <- col.name,
			Condition <- '(Y,N)',
			attributes <- Sequence{col},
			table <- col.table
			)	


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'ColumnBoolean2Column',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_col : iTrace!SourceElement (
			type <- col.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_att : iTrace!TargetElement (
			type <- att.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		),
		elementTarget_ch : iTrace!TargetElement (
			type <- ch.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_col.refSetValue('object', col);
		elementTarget_att.refSetValue('object', att);
		elementTarget_ch.refSetValue('object', ch);
	}
}

-- ____________________ End Added by iTrace  _________________________


rule ColumnNotBoolean2Column {
	from
		col : SQL2003!Column(not col.type.isBoolean() and not col.refImmediateComposite().oclIsTypeOf(SQL2003!DerivedTable))
	to
		att : ORDB4ORA!Column (
				Name <- col.name,
			Type <- if col.type.isHiddenType() then col.type.mirrorType() else col.type endif,
			restrictions <-col.restrictions,
			features <- col.features->select(f|f.haveLegalTarget())->collect(f|thisModule.Feature2Feature(f))
			)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'ColumnNotBoolean2Column',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_col : iTrace!SourceElement (
			type <- col.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_att : iTrace!TargetElement (
			type <- att.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_col.refSetValue('object', col);
		elementTarget_att.refSetValue('object', att);
	}
}

-- ____________________ End Added by iTrace  _________________________


-- La regla transforma una BaseTable de SQL2003 a un Tipo Table de ORDB4ORA
rule BaseTable2Table {
	from
		bt : SQL2003!BaseTable(bt.oclIsTypeOf(SQL2003!BaseTable))
	to
		ta : ORDB4ORA!Table (
			Name <-bt.name,
			columns <- bt.columns,
			restriction <- bt.restrictions,
			views <- bt.views,
			model <- thisModule.schema
		)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'BaseTable2Table',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_bt : iTrace!SourceElement (
			type <- bt.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_ta : iTrace!TargetElement (
			type <- ta.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_bt.refSetValue('object', bt);
		elementTarget_ta.refSetValue('object', ta);
	}
}

-- ____________________ End Added by iTrace  _________________________


lazy abstract  rule Feature2Feature {
	from
		fIN:SQL2003!Feature
	to fOUT:ORDB4ORA!Feature
		(
			key <- fIN.targetKey(),
			value <- fIN.targetValue()
		)


-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'Feature2Feature',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_fIN : iTrace!SourceElement (
			type <- fIN.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_fOUT : iTrace!TargetElement (
			type <- fOUT.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_fIN.refSetValue('object', fIN);
		elementTarget_fOUT.refSetValue('object', fOUT);
	}
}

-- ____________________ End Added by iTrace  _________________________


--La regla transforma una característica de SQL2003 a ORDB4ORA
 lazy rule StringFeature2CharacterFeature extends Feature2Feature {
	from
		fIN:SQL2003!StringFeature(fIN.oclIsTypeOf(SQL2003!StringFeature))
	to fOUT:ORDB4ORA!CharacterFeature



-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'StringFeature2CharacterFeature',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_fIN : iTrace!SourceElement (
			type <- fIN.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_fOUT : iTrace!TargetElement (
			type <- fOUT.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_fIN.refSetValue('object', fIN);
		elementTarget_fOUT.refSetValue('object', fOUT);
	}
}

-- ____________________ End Added by iTrace  _________________________


--La regla transforma una característica de SQL2003 a ORDB4ORA
lazy rule NumericFeature2NumberFeature extends Feature2Feature {
	from
		fIN:SQL2003!NumericFeature(fIN.oclIsTypeOf(SQL2003!NumericFeature))
	to fOUT:ORDB4ORA!NumberFeature



-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'NumericFeature2NumberFeature',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_fIN : iTrace!SourceElement (
			type <- fIN.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_fOUT : iTrace!TargetElement (
			type <- fOUT.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_fIN.refSetValue('object', fIN);
		elementTarget_fOUT.refSetValue('object', fOUT);
	}
}

-- ____________________ End Added by iTrace  _________________________


--La regla transforma una característica de SQL2003 a ORDB4ORA
lazy rule DatetimeFeature2DatetimerFeature extends Feature2Feature {
	from
		fIN:SQL2003!DatetimeFeature(fIN.oclIsTypeOf(SQL2003!DatetimeFeature))
	to fOUT:ORDB4ORA!DatetimeFeature



-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'DatetimeFeature2DatetimerFeature',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_fIN : iTrace!SourceElement (
			type <- fIN.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_fOUT : iTrace!TargetElement (
			type <- fOUT.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_fIN.refSetValue('object', fIN);
		elementTarget_fOUT.refSetValue('object', fOUT);
	}
}

-- ____________________ End Added by iTrace  _________________________


--La regla transforma una característica de SQL2003 a ORDB4ORA
lazy rule IntervalFeature2IntervalFeature extends Feature2Feature {
	from
		fIN:SQL2003!IntervalFeature(fIN.oclIsTypeOf(SQL2003!IntervalFeature))
	to fOUT:ORDB4ORA!IntervalFeature



-- ____________________ Begin Added by iTrace  _________________________

		,
		TraceLink : iTrace!M2MLink (
			ruleName <- 'IntervalFeature2IntervalFeature',
			comment <- 'Automatic generation by iTrace', 
			createdOn <- '05-4-2013',
			mode <- 'Automatic',
			technicalBinding <- 'ATL',
			createdBy <- 'iTrace Tool',
			type <- 'Transformation',
			fromFileName <- '',

			iTraceModel <- thisModule.getTraceModelRoot
		),
		elementSource_fIN : iTrace!SourceElement (
			type <- fIN.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_SQL2003
		),
		elementTarget_fOUT : iTrace!TargetElement (
			type <- fOUT.oclType().toString(),
			traceLink <- TraceLink,
			model <- thisModule.getModel_ORDB4ORA
		)

do {
		elementSource_fIN.refSetValue('object', fIN);
		elementTarget_fOUT.refSetValue('object', fOUT);
	}
}

-- ____________________ End Added by iTrace  _________________________


